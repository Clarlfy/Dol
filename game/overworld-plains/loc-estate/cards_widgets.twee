:: Widgets Blackjack [widget]

<!--Needs to be run in a previous passage to prevent cheating-->
<<widget "blackjackStart">>
<<if _args[0]>>
	<<set $blackjack to {
		cards:shuffle(shuffle(shuffle(deck()))),
		dealerCards: [],
		dealerSecondCardHidden: true,
		dealerState: null,
		dealerScore: null,
		playersCards: [],
		playersState: null,

		isFirstTurn: true,
		/* 
		a turn is stale once the player goes into the cheating menu
		this is to prevent peeking checks/suspicion increase from just going back into the same menu
		ideally, I'd just have the cheating options open a window like with the Help and Options tab
		 */
		turnIsStale: false, 
		susRoseInThisRound: false,
		/* we don't want to increase suspicion for already seen marked cards */
		seenMarkedCardsSoFar: new Set(),

		cheatChoice: null,
		playersScore: null,
		turn: null,
		winner: null,
		caughtCheating: false,
		endPassage: _args[0]
	}>>
<</if>>
<</widget>>

<<widget "blackjackEnd">>
<<unset $blackjack>>
<<set $blackjack_played += 1>>
<<if $blackjack_streak gt $blackjack_streak_high>>
	<<set $blackjack_streak_high to $blackjack_streak>>
<</if>>
<<if $blackjack_streak gte 5>>
	<<earnFeat "Five in a Row">>
<</if>>
<</widget>>

<<widget "blackjackScore">>
<<if _args[0]>>
	<<set _aces to 0>>
	<<set _score to 0>>
	<<for $_i to 0; $_i lt _args[0].length; $_i++>>
		<<switch _args[0][$_i].name>>
			<<case "A">><<set _score += 11>><<set _aces++>>
			<<case "K" "Q" "J">><<set _score += 10>>
			<<default>><<set _score += _args[0][$_i].value>>
		<</switch>>
	<</for>>
	<<for $_i to 0; $_i lt _aces; $_i++>>
		<<if _score gt 21>>
			<<set _score -= 10>>
		<</if>>
	<</for>>
	<<if _args[1]>>
		<<if _args[0].length is 2 and _score is 21>>
				<<set $_blackjack to true>>
		<</if>>
		<<switch _args[1]>>
			<<case "dealer">><<set $blackjack.dealerScore to _score>><<if $_blackjack>><<set $blackjack.dealerState to "blackjack">><</if>>
			<<case "players">><<set $blackjack.playersScore to _score>><<if $_blackjack>><<set $blackjack.playersState to "blackjack">><</if>>
		<</switch>>
	<</if>>
<</if>>
<</widget>>

<<widget "blackjackSuspicion">>
	<<set $blackjackCaughtType = false >>

	<<set _consts__danger_zone_suspicion = 70>>
	<<if _args[0] > 0 && $estatePersistent.suspicion > _consts__danger_zone_suspicion>>
		<<set $blackjackSuspicionCriticalHit = random(1,8) == 1 >>
	<<else>>
		<<set $blackjackSuspicionCriticalHit = false >>
	<</if>>
	<<if $blackjackSuspicionCriticalHit == true >>
		<<set $estatePersistent.suspicion = 100 >>
	<<else>>
		<<set $estatePersistent.suspicion = Math.clamp($estatePersistent.suspicion + _args[0], 0, 100) >>
	<</if>>

	<<if _args[0] > 0 && $estatePersistent && $estatePersistent.suspicion >= 100>>
		<<set $blackjackCaughtType = _args[1] >>
	<</if>>
<</widget>>

<<widget "blackjackGetCanMarkCount">>
	<<set _marked_count = $estatePersistent.markedCards ? $estatePersistent.markedCards.size : 0>>
	<<set _consts__max_marked = 8>>
	<<set _can_mark_count = _consts__max_marked - _marked_count >>
	<<set _non_marked_in_hand = 0>>
	<<for _i = 0; _i < $blackjack.playersCards.length; ++_i>>
		<<set _c = $blackjack.playersCards[_i]>>
		<<if !$estatePersistent.markedCards || !$estatePersistent.markedCards.has(`${_c.name}${_c.suits[0]}`)>>
			<<set _non_marked_in_hand++ >>
		<</if>>
	<</for>>
	<<set _can_mark_count = Math.min(_can_mark_count, _non_marked_in_hand)>>
<</widget>>

<<widget "blackjackCalculate">>
<<if $blackjack.turn is null>>
	<<set $blackjack.turn to "players">>
	<<set $blackjack.playersCards.push($blackjack.cards[0])>>
	<<set $blackjack.dealerCards.push($blackjack.cards[1])>>
	<<set $blackjack.playersCards.push($blackjack.cards[2])>>
	<<set $blackjack.dealerCards.push($blackjack.cards[3])>>
	<<set $blackjack.cards.deleteAt(0,1,2,3)>>
	<<blackjackScore $blackjack.dealerCards "dealer">>
	<<if $blackjack.dealerScore is 21>>
		<<set $blackjack.turn to "dealer">>
	<</if>>
<<else>>
	<<set $blackjack.isFirstTurn = false >>
<</if>>

<!-- <STARTING CHEATS> -->
<<if $blackjack.playersState is "choose_cheat">>
	<<set $blackjack.cheatChoice to null>>
<</if>>
<<if $estate.cards.cheatPeeking is undefined>>
	<<set $estate.cards.cheatPeeking = false>>
<</if>>


<!-- </STARTING CHEATS> -->
<<if $blackjack.playersState is "cheat">>
	<<if $blackjack.cheatChoice is "mark">>
		<<if $estatePersistent.markedCards is null or $estatePersistent.markedCards is undefined>>
			<<set $estatePersistent.markedCards = new Set()>>
		<</if>>

		<<blackjackGetCanMarkCount>>

		<<set _loop_min_ind = $blackjack.playersCards.length - _can_mark_count >>

		<<for _i = $blackjack.playersCards.length - 1; _i >= _loop_min_ind; --_i>> 
			<<set _c = $blackjack.playersCards[_i]>>
			<<set $estatePersistent.markedCards.add(`${_c.name}${_c.suits[0]}`)>>
		<</for>>

		<<set $_marked_text = `${_can_mark_count} of your card${_can_mark_count > 1 ? 's' : ''}`>>
		<<set $_plural = _can_mark_count > 1 ? "them" : "it">>
		You've successfully marked $_marked_text. You'll recognise <<print _can_mark_count > 1 ? "them" : "it">> if you see $_plural on top of the deck, or in Wren's hand.<br>
	<</if>>
	<<set $blackjack.cheatChoice to null>>
<</if>>

<<if $blackjack.playersState is "hit">>
	<<set $blackjack.playersState to null>>
	<<set $blackjack.playersCards.push($blackjack.cards[0])>>
	<<set $blackjack.cards.deleteAt(0)>>
	<<blackjackScore $blackjack.playersCards "players">>
<</if>>
<<blackjackScore $blackjack.playersCards "players">>
<<if $blackjack.playersScore is 21>>
	<<set $blackjack.turn to "dealer">>
<</if>>
<<if $blackjack.turn is "dealer">>
	<<set $blackjack.dealerSecondCardHidden to false>>
	<<for _i to 0; _i lt 20; _i++>>
		<<blackjackScore $blackjack.dealerCards "dealer">>
		<<if $blackjack.dealerScore gte 17>>
			<<break>>
		<</if>>
		<<set $blackjack.dealerCards.push($blackjack.cards[0])>>
		<<set $blackjack.cards.deleteAt(0)>>
	<</for>>
<</if>>
<</widget>>

<!-- args[0] = lost? true if lost, more decay. 
you will lose suspicion every round you play fairly, and you lose
more suspicion if you actually lose the round. -->
<<widget "blackjackControlsPostGameSuspicion">>
	<!-- no decay if suspicion was gained (through seeing new cards or peeking at dealer card) -->
	<<if $blackjack.susRoseInThisRound == false >>
		<<if $estatePersistent.suspicion and $estatePersistent.suspicion gte 1>>
			<<set _cards_suspicion_post_game_decay = 2 >>
			<<if _args[0] and _args[0] == true>>
				<<set _cards_suspicion_post_game_decay = 4 >>
			<</if>>
			<<set _cards_suspicion_post_game_decay += $NPCName[$NPCNameList.indexOf("Wren")].love * 0.05 >>

			<<if _args[0] and _args[0] == true>>
				You've lost this round, fair and square.<<llsuspicion>><br>
			<<else>>
				You've played fairly this round.<<lsuspicion>><br>
			<</if>>
			<<blackjackSuspicion `-_cards_suspicion_post_game_decay` >>
		<</if>>
	<</if>>
<</widget>>

<<widget "blackjackCheatingCaught">>
	<!-- 
		worth considering the option to make Wren throw the player to the moor if lust isn't high enough 
		also worth considering having a longer arousal increase assault, with the player getting kicked out if they endure it

		the reason I haven't done that is because, if the state is "ride" and the player loses - the moor option is not available to then
		  as they'd have to run for that (which is not possible in that position)
		so this means the consequence of losing before the ride state is, at worst, being sent to the moor,
		  but after we've reached the state - the consequence is fornication

		otherwise players could intentionally get caught cheating in this phase in a lost hand and avoid the consequences, but pehraps that
		  should be allowed as a valid strategy
	-->
	<!--  -->
	<<if $estate.cards.state is "ride">>
		<<if $estate.cards.position is "penile" or $estate.cards.position is "vaginal" or $estate.cards.position is "anal">>
			<!-- 
			"I'm feeling kind today," <<he>> says, "so instead of giving you to Remy - I'll just consider this your loss and take my prize."<br><br>
			-->
			"I'm going to consider this your loss", says Wren. "Time to take my prize."
			<br><br>
			<<if $estate.cards.position is "pc_lap" or $estate.cards.position is "penile">>
				<span class="blue">Wren's weight holds you down, preventing flight.</span>
			<<else>>
				<span class="blue">You wouldn't be able to climb off Wren in time, if <<he>> even let you.</span>
			<</if>>
			<br><br>
			<!-- can we even assume consent here? -->
			<<link [[Next|Estate Cards Sex]]>><</link>>
			<br>
		<<else>>
			<!-- I'm not sure what this branch actually is and how it's reached, so I'll just go with this -->
			<!-- 
			"I'm feeling kind today," <<he>> says, "so instead of giving you to Remy - I'll just consider this your loss."<br><br>
			-->
			"I'm going to consider this your loss", says Wren. "Time to take my prize."
			<br><br>
			<<link [[Next|Estate Cards Sex Safe]]>><</link>>
			<br>
		<</if>>
	<<else>>
		<!-- 
		"It looks like <<pshe>> would benefit from being taught some discipline," says <<he>> with a smirk. "I know just the right <<nnpc_gender "Remy">> for that."<br><br>
		 -->
		<<He>> looks at his friends and nods at you. They start advancing on you.
		<br><br>
		<<link [[Run|Estate Cards Run]]>><<set $estate.cards_done to true>><<npcincr Wren love -10>><</link>><<athleticsdifficulty 200 800>><<llllove>>
		<br>
		<<link [[Apologise|Estate Cards Cheating Apologise]]>><<set $estate.cards_done to true>><<trauma 6>><<stress 6>><<npcincr Wren love 3>><</link>><<gtrauma>><<gstress>><<glove>>
		<br>
		<<link [[Protest|Estate Cards Cheating Protest]]>><<set $estate.cards_done to true>><</link>>
		<br>
		<!-- todocop fight option? -->
	<</if>>
<</widget>>

<<widget "blackjackControls">>
<<set _player_can_choose = $blackjack.turn is "players" and $blackjack.playersScore lte 20 >>
<<set _consts__max_marked_see_depth = 3>>
<<set _seen_cards_deck = []>>
<<set _seen_cards_indexes = []>>
<<set _seen_cards_index_strings = []>>
<<set _seen_new_marked_card_this_turn = false >>
<<set _seen_dealer_card = false >>

<!-- we don't want to make the player to be punished for seeing marked cards when it's the dealer's turn (since the player wouldn't be actively looking for them) -->
<<if _player_can_choose>>
	<<for $_i to 0; $_i < _consts__max_marked_see_depth; $_i++>>
		<<set _c = $blackjack.cards[$_i]>>
		<<if $estatePersistent.markedCards && $estatePersistent.markedCards.has(`${_c.name}${_c.suits[0]}`)>>
			<<set _seen_cards_deck.push(_c)>>
			<<set _seen_cards_indexes.push($_i)>>
			<<set _seen_cards_index_strings.push(ordinalSuffixOf($_i+1))>>
			<<if !$blackjack.seenMarkedCardsSoFar.has(`${_c.name}${_c.suits[0]}`);>>
				<<set _seen_new_marked_card_this_turn = true >>
				<<set $blackjack.seenMarkedCardsSoFar.add(`${_c.name}${_c.suits[0]}`); >>
			<</if>>
		<</if>>
	<</for>>
	<<if _seen_cards_deck.length > 0>>
		<<set $_plural = _seen_cards_deck.length > 1 ? "s" : "">>
		<<set _max_card_index = Math.max(...(_seen_cards_indexes)) >>
		<<if _seen_cards_deck.length == 1 && _seen_cards_indexes[0] == 0>>
			You recognise the card sitting on top of the deck. It's one of the cards you've marked:
		<<else>>
			<<set $_indexes_str = joinWithConjuction(_seen_cards_index_strings) >>
			You recognise the $_indexes_str card$_plural from the top of the deck:
		<</if>>
		<br>
		<<for _i to 0; _i <= _max_card_index; _i++>>
			<<set _hidden = !_seen_cards_indexes.includes(_i) >>
			<div class="left"><<cardImage $blackjack.cards[_i] _hidden>></div>
		<</for>>
		<div style="clear:both;"></div>
	<</if>>

	<<set _c = $blackjack.dealerCards[1] >>
	<<if $estatePersistent.markedCards && $estatePersistent.markedCards.has(`${_c.name}${_c.suits[0]}`)>>
		<<if $blackjack.turnIsStale == false>>
			<<if !$blackjack.seenMarkedCardsSoFar.has(`${_c.name}${_c.suits[0]}`);>>
				<<set _seen_new_marked_card_this_turn = true >>
				<<set $blackjack.seenMarkedCardsSoFar.add(`${_c.name}${_c.suits[0]}`); >>
			<</if>>
			<!-- we've seen the card, so we can display it -->
			<<set $blackjack.dealerSecondCardHidden = false >>
			<<set _seen_dealer_card = true>>
			<br><br>
			You recognise this card you've marked to be Wren's hole card.<br>
			<div class="left"><<cardImage _c>></div>
			<div style="clear:both;"></div>
		<<else>>
			<!-- reminding the user that they know Wren's hole card is probably redundant, since they can see it now -->
		<</if>>
	<<elseif $estate.cards.cheatPeeking == true && $blackjack.isFirstTurn == true >>
		<<if $blackjack.turnIsStale == false>>
			<!-- todocop  an alternative, where we handle the deck and the chance to see the card is higher -->
			<!-- 
				skulduggery affects your chance to see the card. base chance is 10%, skulduggery adds from 0 to 10% chance.
				different levels of exposure have a chance to affect the chance as well, as you're distracting the dealer every now and then.
			 -->
			<<set _chance_to_see = Math.clamp(15 + Math.round(currentSkillValue('skulduggery')/100), 15, 25)>>
			<<set _dealer_distracted = false>>
			<<set _dealer_distracted_text = "You notice the dealer occasionally sneaking glances at you.">>
			<!-- we generate two numbers because we want a different chance for the text appearing: we don't want it tied to the chance_to_see -->
			/* base 15-25% chance */
			<<if $estate.cards.state is "ride">>
				<<if random(1, 5) > 1>>
					/* 4/5 * .8 = +60% chance */
					<<set _chance_to_see += 75>>
					<<set _dealer_distracted = true>>
					<<person2>>
					<<silently>><<his>><</silently>>
					<<set _dealer_distracted_text = "You notice the dealer watching you and Wren with lust in " + _text_output + " eyes." >>
					<<person1>>
				<</if>>
			<<elseif $exposed == 2>>
				<!-- actual chance bonus = random_chance * extra_chance_to_see (so .5*.75=0.375) -->
				<<if random(1, 2) == 1>>
					/* 1/2 * .75 = +37.5% chance */
					<<set _chance_to_see += 75>>
					<<set _dealer_distracted = true>>
					<<person2>>
					<<silently>><<he>><</silently>>
					<<set _dealer_distracted_text = "You notice the dealer oogling your body when " + _text_output + " thinks you're not looking." >>
					<<person1>>
				<</if>>
			<<elseif $exposed == 1>>
				<<if random(1, 2) == 1>>
					/* 0.5 * .4 = +20% chance */
					<<set _chance_to_see += 40>>
					<<set _dealer_distracted = true>>
					<<set _dealer_distracted_text = "You notice the dealer occasionally sneaking glances at you.">>
				<</if>>
			<</if>>
			<<if _dealer_distracted == true>>
				<span class="pink">_dealer_distracted_text</span>
				<br>
			<</if>>
			<<rng>>
			<<if $rng < _chance_to_see>>
				The dealer seems distracted, as <<person2>><<he>><<person1>> clumsily hands Wren <<his>> second card.
				<br>
				<span class="green">You manage to sneak a peek at Wren's hole card.</span>
				<br>
				<div class="left"><<cardImage _c>></div>
				<div style="clear:both;"></div>
				<<blackjackSuspicion 10 "holecardingsuccess">>
				<<if $blackjackSuspicionCriticalHit == false>>
					<<switch random(1,3)>>
						<<case 1>>
							Wren also notices the dealer's blunder and glances at you, but doesn't say anything.<<gsuspicion>>
						<<case 2>>
							Wren also notices the dealer's blunder and glances at you. "I hope you're keeping your eyes on your own hand", <<he>> says.<<gsuspicion>>
						<<case 3>>
							<<person2>>
							<<set _text_output_custom = $pronoun is "m" ? "man" : "girl" >>
							<<person1>>
							"Come on, _text_output_custom!" says Wren to the dealer. "Gotta be swifter when you deal the cards". <<He>> glances at you, but doesn't say anything else.
					<</switch>>
				<<else>>
					When you look at Wren however, you see he's <span class="red">staring into your eyes with a smirk.</span><<gggsuspicion>>
				<</if>>
				<br><br>
				<!-- we've seen the card, so we can display it -->
				<<set $blackjack.dealerSecondCardHidden = false >>
				<<set $blackjack.susRoseInThisRound = true >>
				<<set $blackjack.suspicionIncreasedInFirstTurn = true >>
			<<else>>
				<<set $blackjack.susRoseInThisRound = true >>
				<<blackjackSuspicion 5 "holecardingfail">>
				You try to peek at Wren's second card while it's being dealt, but you don't manage to see anything.<br>
				<<if $blackjackSuspicionCriticalHit == false>>
					<<switch random(1,3)>>
						<<case 1>>
							You wonder if they can tell you're peeking.<<gsuspicion>>
						<<case 2>>
							You notice Wren eyeing you.<<gsuspicion>>
						<<case 3>>
							You can feel Wren staring at you after receiving <<his>> card.<<gsuspicion>>
					<</switch>>
				<<else>>
					When you look at Wren however, you see he's <span class="red">staring into your eyes with a smirk.</span><<gggsuspicion>>
				<</if>>
				<br><br>
			<</if>>
		<<else>>
			<!-- reminding the user that they know Wren's hole card is probably redundant, since they can see it now -->
		<</if>>
	<</if>>
<</if>>

<<set _marked_card_show_sus_warning = false >>
<<if _player_can_choose and $blackjack.turnIsStale != true>>
	<<if _seen_new_marked_card_this_turn >>
		<!-- 
		we do this here to make sure all automatic suspicion raising actions are performed before this check
		we set a simple bool value for simplicity (so that we don't copy-paste the checks)
		-->
		<<set _marked_card_show_sus_warning = true >>
		<<set $blackjack.susRoseInThisRound = true >>
		<<blackjackSuspicion `Math.round($estatePersistent.markedCards.size * 0.4)` "markedcardseen">>
	<</if>>
<</if>>

<<if $estatePersistent.suspicion >= 100>>
	<<switch $blackjackCaughtType>>
		<<case "holecardingfail" "holecardingsuccess">>
			"Careful there," says Wren. "<span class="red">You're peeking too hard.</span> You don't want to snap your own neck."
			<br><br>
			<<if $submissive gte 1150>>
				"I-I'm sorry, I didn't mean to look!", you say.
			<<elseif $submissive lte 850>>
				"Peeking? I'm just making sure your dealer isn't doing anything shady," you say. "Scared?"
			<<else>>
				"I wasn't peeking", you say.
			<</if>>
			<br><br>
			Wren scoffs. <<He>> doesn't look convinced by your words.
			<br><br>
			<<blackjackCheatingCaught>>
		<<case "markedcardseen">>
			<<if _seen_dealer_card == true>>
				Wren stares at you for a moment, before carefully inspecting <<his>> hole card. Then, <span class="red"><<he>> scoffs</span>.
				<br><br>
			<<else>>
				Wren stares at you for a moment, before grabbing a card from the deck. <<He>> inspects it, and then - <span class="red"><<he>> scoffs</span>. 
			<</if>>
			<br><br>
			<<He>> points to the mark you've placed on the card. "You ain't slick", Wren says.
			<br><br>
			<<if $submissive gte 1150>>
				"I-It wasn't me, I didn't do anything!", you say.
			<<elseif $submissive lte 850>>
				"Don't be stupid," you say. "That's just a scratch. For all we know it could be the dealer's fault."
			<<else>>
				"That's just a scratch", you say. "Doesn't mean it was intentional, let alone that it was me."
			<</if>>
			<br><br>
			Wren scoffs. <<He>> doesn't look convinced by your words.
			<br><br>
			<<blackjackCheatingCaught>>
		<<default>>
			<br><br>
			<<blackjackCheatingCaught>>
	<</switch>>
<<else>>
	<<blackjackShowCards>>
	<<blackjackCheatingAlertsFooter>>
	<<blackjackControlsChoices>>
<</if>>
<</widget>>


<<widget "blackjackShowCards">>
Wren's cards:
<br>
<<for _i to 0; _i lt $blackjack.dealerCards.length; _i++>>
	<div class="left">
		<<if _i is 0>>
			<<cardImage $blackjack.dealerCards[0]>>
		<<else>>
			<<cardImage $blackjack.dealerCards[_i] $blackjack.dealerSecondCardHidden>>
		<</if>>
	</div>
<</for>>
<div style="clear:both;"></div>
<<if $blackjack.dealerSecondCardHidden>>
	<<blackjackScore `[$blackjack.dealerCards[0]]` "dealer">>
	Known Total: <<print $blackjack.dealerScore>>
<<else>>
	<<blackjackScore $blackjack.dealerCards "dealer">>
	Total: <<print $blackjack.dealerScore>>
<</if>>
<br><br>
Your cards:
<br>
<<for _i to 0; _i lt $blackjack.playersCards.length; _i++>>
	<div class="left"><<cardImage $blackjack.playersCards[_i]>></div>
<</for>>
<div style="clear:both;"></div>
Total: <<print $blackjack.playersScore>>
<</widget>>



<<widget "blackjackCheatingAlertsFooter">>
<<if _marked_card_show_sus_warning >>
	<br><br>
	While you were looking at the marked cards, you could feel Wren and <<his>> friends occasionally glancing at you.<<gsuspicion>>
<</if>>

<<if $blackjack.playersState is "choose_cheat">>
	<br><br>
	<<set _marked_count = $estatePersistent.markedCards ? $estatePersistent.markedCards.size : 0>>
	<<set _consts__max_marked = 8>>
	You've marked <<print _marked_count>> cards in this deck.<br>
	<<set _d = deck()>>
	<<for _i = 0; _i < _d.length; ++_i>>
		<<set _c = _d[_i]>>
		<<if $estatePersistent.markedCards && $estatePersistent.markedCards.has(`${_c.name}${_c.suits[0]}`)>>
			<div class="left"><<cardImage _c>></div>
		<</if>>
	<</for>>
	<div style="clear:both;"></div>
	<br>
	<<if _marked_count >= _consts__max_marked>>
		That's as many unique marks as you can place and remember. You can no longer mark cards until Wren changes the deck.
	<<else>>
		You can mark up to <<print _consts__max_marked - _marked_count>> more cards. That's as many as you'll be able to mark and remember.
	<</if>>
<</if>>

<<if $estatePersistent.suspicion is undefined>>
	<<set $estatePersistent.suspicion = 0 >>
<</if>>
<<if $estatePersistent.suspicion > 0>>
	<br><br>
	Suspicion:
	<<statbar $estatePersistent.suspicion 100 right>>
	<<set _consts__danger_zone_suspicion = 70>>
	<<if $estatePersistent.suspicion > _consts__danger_zone_suspicion>>
		<br>
		<span class="red">Wren and <<his>> friends are very suspicious of you, and you are being closely watched.</span>
	<</if>>
<</if>>
<</widget>>


<<widget "blackjackControlsChoices">>
<br><br>
<<if $blackjack.turn is "players" and $blackjack.playersScore lte 20>>
	<<if $blackjack.playersState is "choose_cheat">>
		<<link [[Back (regular options)|$passage]]>><<set $blackjack.playersState to null>><</link>>
		<<if _marked_count < _consts__max_marked>>
			<<set _can_mark_count = _consts__max_marked - _marked_count >>
			<<set _non_marked_in_hand = 0>>
			<<for _i = 0; _i < $blackjack.playersCards.length; ++_i>>
				<<set _c = $blackjack.playersCards[_i]>>
				<<if !$estatePersistent.markedCards || !$estatePersistent.markedCards.has(`${_c.name}${_c.suits[0]}`)>>
					<<set _non_marked_in_hand++ >>
				<</if>>
			<</for>>
			<<set _can_mark_count = Math.min(_can_mark_count, _non_marked_in_hand)>>

			<<if _can_mark_count > 0>>
				<<if _can_mark_count > 1>> 
					<<set $_link_text = `Mark your ${_can_mark_count} newest cards`>>
				<<else>>
					<<set $_link_text = `Mark your newest card`>>
				<</if>>
				<br>
				<<set $skulduggerydifficulty = 400 + _can_mark_count*100 + $estatePersistent.suspicion*25 >>
				<<link [[$_link_text|Estate Blackjack Cheat]]>><<set $blackjack.playersState to "cheat">><<set $blackjack.cheatChoice to "mark">><</link>><<skulduggerydifficulty>>
			<</if>>

			<<if $estate.cards.cheatPeeking == true >>
				<br>
				<<link [[Stop peeking at Wren's hole card during dealing|$passage]]>><<set $estate.cards.cheatPeeking = false>><</link>>
			<<else>>
				<br>
				<<link [[Peek at Wren's hole card during dealing|$passage]]>><<set $estate.cards.cheatPeeking = true>><</link>>
			<</if>>
		<</if>>
		<!--  // todo
			<br>
			<<link [[Swap deck cards|$passage]]>><<set $blackjack.playersState to "cheat">><<set $blackjack.cheatChoice to "swap_deck">><</link>>
			<br>
			<<link [[Peek hole card|$passage]]>><<set $blackjack.playersState to "peek">><<set $blackjack.cheatChoice to "peek_hole_card">><</link>>
		 -->
	<<else>>
		<<link [[Hit|$passage]]>><<set $blackjack.playersState to "hit">><<set $blackjack.turnIsStale = false>><<set $blackjack.isFirstTurn = false>><</link>> |
		<<link [[Stand|$passage]]>><<set $blackjack.turn to "dealer">><<set $blackjack.playersState to "stand">><<set $blackjack.turnIsStale = false>><<set $blackjack.isFirstTurn = false>><</link>> |
		<<link [[Cheating options|$passage]]>><<set $blackjack.playersState to "choose_cheat">><<set $blackjack.turnIsStale = true>><</link>> |
		<<link "Help and Options">><<overlayReplace "blackjackHelp">><</link>>
	<</if>>
<<elseif $blackjack.turn is "players" and $blackjack.playersScore gt 21>>
	<span class="red">Bust</span>
	<br>
	<<blackjackControlsPostGameSuspicion true>>

	<<link [[End game|Estate Blackjack Lose]]>><</link>>
	<br>
<<elseif $blackjack.turn is "dealer">>
	<<if $blackjack.playersState is "blackjack" and $blackjack.dealerState is "blackjack">>
		<<set $blackjack.winner to "tie">>
		<span class="blue">You tie with both having Natural Blackjacks</span>
	<<elseif $blackjack.playersState is "blackjack">>
		<<set $blackjack.winner to "player">>
		<span class="green">You win with a Natural Blackjack</span>
		<<set $blackjack_won += 1>>
		<<set $blackjack_streak += 1>>
	<<elseif $blackjack.dealerState is "blackjack">>
		<<set $blackjack.winner to "dealer">>
		<span class="red">You lose to the Natural Blackjack</span>
		<<set $blackjack_streak to 0>>
	<<elseif $blackjack.playersScore gt $blackjack.dealerScore or $blackjack.dealerScore gt 21>>
		<<set $blackjack.winner to "player">>
		<span class="green">You win</span>
		<<set $blackjack_won += 1>>
		<<set $blackjack_streak += 1>>
	<<elseif $blackjack.playersScore is $blackjack.dealerScore>>
		<<set $blackjack.winner to "tie">>
		<span class="blue">You tie</span>
	<<else>>
		<<set $blackjack.winner to "dealer">>
		<span class="red">You lose</span>
		<<set $blackjack_streak to 0>>
	<</if>>
	<br><br>
	<<if $blackjack.winner is "tie">>
		<<blackjackControlsPostGameSuspicion>>
		<<blackjackEnd>>
		<<blackjackStart "Blackjack Finish">>
		<<link [[Next|Estate Blackjack]]>><<pass 1>><</link>>
		<br>
	<<elseif $blackjack.winner is "dealer">>
		<<blackjackControlsPostGameSuspicion true>>
		<<link [[Next|Estate Blackjack Lose]]>><</link>>
		<br>
	<<else>>
		<<blackjackControlsPostGameSuspicion>>
		<<link [[Next|Estate Blackjack Win]]>><</link>>
		<br>
	<</if>>
<</if>>
<</widget>>


<<widget "blackjackHelp">>
<<set _consts__max_marked = 8>>
<h3>Blackjack Guide</h3>
<ul>
	<li>Your goal is to beat the dealer in having a higher score that never goes above 21.</li>
	<li>Cards are valued from 2 to 11. Jack, Queen and King are worth 10 each, Ace is worth either 1 or 11, whichever is more favourable.</li>
	<li>Scoring a total of 21 with 2 cards is known as a "Natural Blackjack," you or the dealer will win over any other combination unless you tie.</li>
	<li>If either you or the dealer go over 21, the one who bust loses.</li>
	<li>Stand to end your turn, hit to gain another card.</li>
	<li>The dealer always plays by specific rules, use that to your advantage. The dealer must hit when their score is below 17.</li>
</ul>
<h3>Cheating Guide</h3>
<ul>
	<li>In blackjack, a "hole card" is the dealer's second hidden card. "Hole carding" refers to attempts to find out what the hidden card is. You can do that by trying to <b>peek</b> at the card as it's being dealt. Intentionally trying to peek at the cards being dealt is against the rules.</li>
	<li>Marking a card refers to leaving some sort of mark on it that allows you to identify it. You can leave up to _consts__max_marked marks on cards you get to hold. Be careful, as marking cards is against the rules.</li>
	<li>Once you mark a card, the mark will remain until the deck is replaced. It's not too difficult to tell that a person is looking for a mark on the back of a card, so be careful.</li>
	<li>The cards are dealt by a dealer. As long as they're in your view, you can try and peek at the card they're giving to Wren.</li>
</ul>

<h3>Options</h3>
<<link [[Save and close|$passage]]>><</link>>
<br><br>
Back cover:
<br>

<div id="card-cover-options" @class="'clothes-' + $cardcover.colour">
	<<for _i = 0; _i <= 7; _i++>>
		<div @class="'div-link card cardcover' + _i + ($cardcover.style == _i ? ' active' : '')">
			<<if _i == 0>>
				<span class="number">?</span>
				<span class="suit">?</span>
			<</if>>
			<<capture _i>>
				<<link "">>
					<<set $cardcover.style = _i>>
					<<run $('#card-cover-options .card').removeClass('active')>>
					<<run $('#card-cover-options .card:nth-child(' + (_i+1) + ')').addClass('active')>>
				<</link>>
			<</capture>>
		</div>
	<</for>>
</div>
<label>
	Colour:
	<<listbox "$cardcover.colour" autoselect>>
		<<option "Black" "black">>
		<<option "Navy" "navy">>
		<<option "Blue Steel" "blue-steel">>
		<<option "Light Grey" "grey">>
		<<option "White" "pale-white">>
		<<option "Silver" "silver">>
		<<option "Black & White" "white">>
		<<option "Gold" "gold">>
		<<option "Black & Orange" "yellow">>
		<<option "Yellow" "pale-yellow">>
		<<option "Bronze" "bronze">>
		<<option "Brown" "brown">>
		<<option "Sand" "sand">>
		<<option "Olive" "olive">>
		<<option "Orange" "tangerine">>
		<<option "Red Orange" "pale-tangerine">>
		<<option "Red" "red">>
		<<option "Green" "green">>
		<<option "Light Green" "light-green">>
		<<option "Blue" "blue">>
		<<option "Light Blue" "light-blue">>
		<<option "Pink" "pink">>
		<<option "Light Pink" "light-pink">>
		<<option "Purple" "purple">>
		<<option "Teal" "teal">>
	<</listbox>>
</label>

<<run $(() => {
	linkifyDivs('#card-cover-options');
	$('#listbox-cardcovercolour').on('change', () => {
		$('#card-cover-options').removeClass().addClass('clothes-' + $cardcover.colour)
	});
})>>

<</widget>>

:: Widgets High Low [widget]

<!--Needs to be run in a previous passage to prevent cheating-->
<<widget "highLowStart">>
<<if _args[0]>>
	<<set $highlow to {
		cards:shuffle(shuffle(shuffle(deck()))),
		correct: 0,
		dealerCard: null,
		playersCard: null,
		playersCardHidden: null,
		gamestart: false,
		turn: null,
		choice: null,
		endPassage: _args[0]
	}>>
<</if>>
<</widget>>

<<widget "highLowEnd">>
<<unset $highlow>>
<</widget>>

<<widget "cardText">>
<<if _args[0]>>
	<<if _args[1]>>
		Turned over.
	<<else>>
		<<switch _args[0].name>>
			<<case "A">>Ace
			<<case "K">>King
			<<case "Q">>Queen
			<<case "J">>Jack
			<<default>>_args[0].name
		<</switch>>
		of <<print _args[0].suits>>.
	<</if>>
<</if>>
<</widget>>

<<widget "highLowCalculate">>
<<if $highlow.gamestart is false>>
	<<set $highlow.gamestart to true>>
	<<set $highlow.turn to "players">>
<</if>>

<<if $highlow.turn is "players">>
	Players Turn
	<br>
	<<set $highlow.dealerCard to $highlow.cards[0]>>
	<<set $highlow.playersCard to $highlow.cards[1]>>
	<<set $highlow.cards.deleteAt(0,1)>>
	<<set $highlow.playersCardHidden to true>>
<<elseif $highlow.turn is "dealer">>
	Dealer Turn
	<br>
	<<set $highlow.playersCardHidden to false>>
	<<if ($highlow.choice is "lower" and $highlow.playersCard.value lt $highlow.dealerCard.value) or ($highlow.choice is "higher" and $highlow.playersCard.value gt $highlow.dealerCard.value)>>
		<<if $highlow.correct is 0>>
			<<set $highlow.correct++>>
		<<else>>
			<<set $highlow.correct*=2>>
		<</if>>
	<</if>>
	<<if $highlow.cards.length lt 30>>
		<<set $highlow.cards to shuffle(shuffle(shuffle(deck())))>>
		They reshuffle the deck.
		<br>
	<</if>>
<</if>>
<</widget>>

<<widget "highLowControls">>
<div class="highlow">
	<div><span class="title">Dealers card:</span> <<cardImage $highlow.dealerCard>></div>
	<div><span class="title">Your card:</span> <<cardImage $highlow.playersCard $highlow.playersCardHidden>></div>
</div>
<div style="clear:both;"></div>
Your current score: <<print $highlow.correct>>
<br>


<<if $highlow.turn is "players">>
	<<link [[Lower|$passage]]>><<set $highlow.choice to "lower">><<set $highlow.turn to "dealer">><</link>> |
	<<link [[Higher|$passage]]>><<set $highlow.choice to "higher">><<set $highlow.turn to "dealer">><</link>> |
	<<if $highlow.correct gt 4>>
		<br>
		<<link [[End game|$highlow.endPassage]]>><<set $highlow.correct/=2>><</link>><<if $statdisable is "f">> | <span class="red">Lose half your score</span><</if>> |
	<</if>>
<<elseif $highlow.turn is "dealer">>

	<<if ($highlow.choice is "lower" and $highlow.playersCard.value lt $highlow.dealerCard.value) or ($highlow.choice is "higher" and $highlow.playersCard.value gt $highlow.dealerCard.value)>>
		Your correct
		<br>
		<<link [[Continue|$passage]]>><<set $highlow.turn to "players">><</link>> |
		<br>
		<<link [[End game|$highlow.endPassage]]>><</link>> |
	<<elseif $highlow.playersCard.value is $highlow.dealerCard.value>>
		Draw
		<br>
		<<link [[Continue|$passage]]>><<set $highlow.turn to "players">><</link>> |
		<br>
		<<link [[End game|$highlow.endPassage]]>><</link>> |
	<<else>>
		You Lose
		<br>
		<<link [[End game|$highlow.endPassage]]>><<set $highlow.correct to 0>><</link>>
	<</if>>
<</if>>
<</widget>>

<<widget "cardImage">>
<<if _args[0]>>
	<div @class="'card ' + (_args[1] ? 'cardcover' + $cardcover.style : '') + ' clothes-' + $cardcover.colour">
		<<if _args[1]>>
			<<if $cardcover.style == 0>>
				<span class="number">?</span>
				<span class="suit">?</span>
			<</if>>
		<<else>>
			<<if _args[0].suits is "Diamonds">>
				<<set _suits to "diams">>
			<<else>>
				<<set _suits to _args[0].suits.toLowerCase()>>
			<</if>>
			<span class="number"><<print _args[0].name>></span>
			<span class="suit"><<print "&" + _suits + ";">></span>&nbsp;&nbsp;
		<</if>>
	</div>
<</if>>
<</widget>>

<<widget "estate_cards_bet">>


<<if $worn.over_upper.name isnot "naked">>
	<<set $estate.cards.desire to "over_upper">>
	"If I win," <<he>> points at your $worn.over_upper.name. <span class="blue">"You lose <<overupperthat>>."</span>
<<elseif $worn.over_lower.name isnot "naked">>
	<<set $estate.cards.desire to "over_lower">>
	"If I win," <<he>> points at your $worn.over_upper.name. <span class="blue">"You lose <<overlowerthat>>."</span>

<<elseif $worn.feet.name isnot "naked" and $worn.feet.cursed isnot 1>>
	<<set $estate.cards.desire to "feet">>
	"If I win," <<he>> points at your $worn.feet.name. <span class="blue">"You lose your shoes."</span>

<<elseif $worn.legs.name isnot "naked">>
	<<set $estate.cards.desire to "legs">>
	"If I win," <<he>> points at your $worn.legs.name. <span class="blue">"You lose <<legsthat>>."</span>

<<elseif $worn.upper.name isnot "naked">>
	<<set $estate.cards.desire to "upper">>
	"If I win," <<he>> points at your $worn.upper.name. <span class="purple">"You lose your <<dress>>."</span>

<<elseif $worn.lower.name isnot "naked">>
	<<set $estate.cards.desire to "lower">>
	"If I win," <<he>> points at your $worn.lower.name. <span class="purple">"You lose your <<skirt>>."</span>

<<elseif $worn.hands.name isnot "naked">>
	<<set $estate.cards.desire to "hands">>
	"If I win," <<he>> points at your $worn.hands.name. <span class="blue">"You lose those gloves."</span>

<<elseif $worn.under_upper.name isnot "naked">>
	<<set $estate.cards.desire to "under_upper">>
	"If I win," <<he>> points at your $worn.under_upper.name. <span class="pink">"You lose your <<bra>>."</span>

<<elseif $worn.under_lower.name isnot "naked">>
	<<set $estate.cards.desire to "under_lower">>
	"If I win," <<he>> points at your $worn.under_lower.name. <span class="pink">"I take your <<panties>>."</span>

<<else>>

	<<if $estate.cards.state is "ride">>
	"If I win,"
		<<rng 4>>
		<<if $rng is 4>>
			<<set $estate.cards.desire to "kiss">>
			<<he>> hovers <<his>> mouth close, until you feel <<his>> breath on your lips. "We kiss."
		<<elseif $rng is 3>>
			<<he>> grins. "I get to fondle your
			<<if $player.penisExist and $player.vaginaExist>>
				<<if random(1, 2) is 2>>
					<<set $estate.cards.desire to "penis_grope">>
					cock."
				<<else>>
					<<set $estate.cards.desire to "pussy_grope">>
					pussy."
				<</if>>
			<<elseif $player.penisExist>>
				<<set $estate.cards.desire to "penis_grope">>
				penis."
			<<else>>
				<<set $estate.cards.desire to "pussy_grope">>
				pussy."
			<</if>>
		<<elseif $rng is 2>>
			<<set $estate.cards.desire to "bottom_grope">>
			<<he>> grins. "I get to fondle your bum."
		<<elseif $rng is 1>>
			<<set $estate.cards.desire to "chest_grope">>
			<<he>> grins. "I get to play with your chest."
		<</if>>
	<<else>>
		<<if $estate.cards.lust gte 2>>
			<<if $NPCList[0].penis isnot "none">>
				"If I win," <<he>> grins.
				<<if $player.vaginaExist and !$worn.genitals.type.includes("chastity")>>
					"You sit on my lap. Don't worry. I won't touch your pussy. Yet."
					<<set $estate.cards.desire to "vaginal">>
				<<elseif $analdisable is "f" and $worn.genitals.anal_shield isnot 1>>
					"You sit on my lap. Don't worry. I won't take advantage. Yet."
					<<set $estate.cards.desire to "anal">>
				<<elseif !$worn.genitals.type.includes("chastity")>>
					"You sit on my lap. Don't worry. I won't take advantage. Yet."
					<<set $estate.cards.desire to "wren_lap">>
				<<else>>
					<<He>> looks at your $worn.genitals.name. "That's an interesting device you have there," <<he>> says, reclining in <<his>> chair. "<span class="blue">I'd love to see beneath it.</span> For now though, I have everything I want from you. Have a safe trip home." <<His>> friends laugh.
					<<set $estate.cards.desire to "chastity">>
				<</if>>
			<<else>>
				"If I win," <<he>> grins.
				<<if $player.penisExist and !$worn.genitals.type.includes("chastity")>>
					"I sit on your lap. Don't worry. I won't touch your cock. Yet."
					<<set $estate.cards.desire to "penile">>
				<<elseif !$worn.genitals.type.includes("chastity")>>
					"I sit on your lap. Don't worry. I won't take advantage. Yet."
					<<set $estate.cards.desire to "pc_lap">>
				<<else>>
					<<He>> looks at your $worn.genitals.name. "That's an interesting device you have there," <<he>> says, reclining in <<his>> chair. "<span class="blue">I'd love to see beneath it.</span> For now though, I have everything I want from you. Have a safe trip home." <<His>> friends laugh.
					<<set $estate.cards.desire to "chastity">>
				<</if>>
			<</if>>
		<<elseif $estate.cards.lust gte 1>>
			<<set $estate.cards.desire to "bend">>
			"If I win," <<he>> grins. "You climb atop your chair and bend over. Let us see you more closely."
		<<else>>
			<<set $estate.cards.desire to "twirl">>
			"If I win," <<he>> grins. "You twirl on the spot. Give us a show. And no covering with your hands." The others murmur their enthusiasm.
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "cards_strip_text">>
"Don't keep us waiting.
<<if $rng gte 91>>
	Give it here."
<<elseif $rng gte 81>>
	Let's have it off."
<<elseif $rng gte 71>>
	Strip."
<<elseif $rng gte 61>>
	Off it comes."
<<elseif $rng gte 51>>
	Let's see what's beneath."
<<elseif $rng gte 41>>
	That's my property now."
<<elseif $rng gte 31>>
	Have it off."
<<elseif $rng gte 21>>
	Let's see you strip."
<<elseif $rng gte 11>>
	Strip, or be stripped."
<<else>>
	I'm not a patient <<nnpc_gender "Wren">>."
<</if>>
<</widget>>

<<widget "cards_exposure_text">>

<<if random(1, 10) is 10>>
	<<if $worn.over_upper.exposed gte 2 and $worn.upper.exposed gte 2 and $worn.under_upper.exposed gte 1 and ($player.gender is "f" or $player.gender_appearance is "f")>>
		<<if $uncomfortable.nude is true>>
			<span class="lewd">You keep one arm over your <<breasts>>, protecting them from the prying eyes of Wren and <<his>> friends.</span>
			<br>
		<<else>>
			<span class="lewd">You can feel Wren and <<his>> friends' eyes on your <<breasts>>, but you don't care. You're focused on the game.</span>
			<br>
		<</if>>
	<<elseif $worn.over_upper.exposed gte 1 and $worn.upper.exposed gte 1 and ($player.gender is "f" or $player.gender_appearance is "f")>>
		<<if $uncomfortable.underwear is true>>
			<span class="lewd">You feel self-conscious about the lack of clothing on your chest, and keep one arm over it.</span>
			<br>
		<<else>>
			<span class="lewd">You're unbothered by having so little clothing on your chest.</span>
			<br>
		<</if>>
	<</if>>
<</if>>
<<if random(1, 10) is 10>>
	<<if $worn.over_lower.exposed gte 2 and $worn.lower.exposed gte 2 and $worn.under_lower.exposed gte 1>>
		<<if $uncomfortable.nude is true>>
			<span class="lewd">Even sat with your legs under the table, your bare <<bottom>> and <<genitals>> make you feel so exposed.</span>
			<br>
		<<else>>
			<span class="lewd">You're unbothered by your bare <<bottom>> and <<genitals>>. They're under the table anyway.</span>
			<br>
		<</if>>
	<<elseif $worn.over_lower.exposed gte 1 and $worn.lower.exposed gte 1>>
		<<if $uncomfortable.underwear is true>>
			<span class="lewd">Wearing so little beneath your waist makes you feel uncomfortable.</span>
			<br>
		<<else>>
			<span class="lewd">You're unbothered by having so little clothing beneath your waist.</span>
			<br>
		<</if>>
	<</if>>
<</if>>
<<if random(1, 10) is 10>>
	<<if $estate.cards.wren_top is 0 and $estate.cards.wren_under_top is 0>>
		<<if $pronoun is "f">>
			<<if $NPCList[0].breastsize gte 5>>
				<span class="lewd">Wren struggles to keep <<his>> <<print $NPCList[0].breastsdesc>> covered with one arm.</span>
			<br>
			<<else>>
				<span class="lewd">Wren keeps <<his>> <<print $NPCList[0].breastsdesc>> covered with one arm.</span>
			<br>
			<</if>>
		<<else>>
			<span class="lewd">Wren shuffles uncomfortably as you glance at <<his>> bare chest.</span>
			<br>
		<</if>>
	<<elseif $estate.cards.wren_top is 0>>
		<<if $pronoun is "f">>
			<span class="lewd">Wren shuffles uncomfortably as you glance at <<his>> bra.</span>
			<br>
		<</if>>
	<</if>>
<</if>>
<<if random(1, 10) is 10>>
	<<if $estate.cards.wren_bottoms is 0 and $estate.cards.wren_under_bottoms is 0>>
		<<if $pronoun is "f">>
			<span class="lewd">Wren folds one leg over the other, covering <<his>> bare groin.</span>
			<br>
		<<else>>
			<span class="lewd">Wren keeps <<his>> legs held tight together.</span>
			<br>
		<</if>>
	<<elseif $estate.cards.wren_bottoms is 0>>
		<<if $pronoun is "f">>
			<span class="lewd">Wren shifts uncomfortably as a colleague glances at <<his>> panties.</span>
			<br>
		<<else>>
			<span class="lewd">Wren shifts uncomfortably as a colleague glances at <<his>> briefs.</span>
			<br>
		<</if>>
	<</if>>
<</if>>
<<if random(1, 10) is 10>>
	<<if $estate.cards.state is "ride">>
		<<switch $estate.cards.position>>
		<<case "wren_lap">>

		<<case "pc_lap">>

		<<case "penile">>
			<span class="lewd">Wren kisses your <<penis>> with <<his>> pussy.</span>
			<br>
		<<case "vaginal">>
			<span class="lewd">Wren pokes your <<pussy>> with <<his>> <<print $NPCList[0].penisdesc>>.</span>
			<br>
		<<case "anal">>
			<span class="lewd">Wren rubs <<his>> <<print $NPCList[0].penisdesc>> against your <<bottom>>.</span>
			<br>
		<</switch>>
	<</if>>
<</if>>
<br>
<</widget>>

<<widget "cards_naked_cover">>
<<if $uncomfortable.nude is true>>
	<span class="lewd">You cover your <<breasts>> with an arm, and keep your thighs squeezed tight together.</span>
	<br><br>
<</if>>
<</widget>>

<<widget "cards_bottom_cover">>
<<if $uncomfortable.nude is true>>
	<span class="lewd">You keep your thighs squeezed tight together.</span>
	<br><br>
<</if>>
<</widget>>

<<widget "cards_top_cover">>
<<if $uncomfortable.nude is true>>
	<span class="lewd">You cover your <<breasts>> with an arm.</span>
	<br><br>
<</if>>
<</widget>>

<<widget "cards_underwear_cover">>
<<if $uncomfortable.underwear is true>>
	<span class="lewd">You cover your $worn.under_upper.name with one arm, and make sure your $worn.under_lower.name <<underlowerplural>> on right.</span>
	<br><br>
<</if>>
<</widget>>

<<widget "cards_panties_cover">>
<<if $uncomfortable.underwear is true>>
	<span class="lewd">You anxiously make sure your $worn.under_lower.name <<underlowerplural>> on right.</span>
	<br><br>
<</if>>
<</widget>>

<<widget "cards_bra_cover">>
<<if $uncomfortable.underwear is true>>
	<span class="lewd">You cover your $worn.under_upper.name with an arm.</span>
	<br><br>
<</if>>
<</widget>>

<<widget "cards_virginity_warning">>
<<if $estate.cards.position is "vaginal">>
	<<if $player.virginity.vaginal is true>>
		<span class="red">If you orgasm, Wren will take your virginity.</span>
	<</if>>
<<elseif $estate.cards.position is "penile">>
	<<if $player.virginity.penile is true>>
		<span class="red">If you orgasm, Wren will take your virginity.</span>
	<</if>>
<<elseif $estate.cards.position is "anal">>
	<<if $player.virginity.anal is true>>
		<span class="red">If you orgasm, Wren will take your anal virginity.</span>
	<</if>>
<</if>>
<</widget>>

<<widget "cards_arousal_check">>
<<if $arousal gte $arousalmax>>
	It's too much. <<orgasm>>
	<br><br>
	<<set _cards_orgasm to true>><<set $consensual to 1>>

<<elseif $arousal gte ($arousalmax / 5) * 4>>

<<elseif $arousal gte ($arousalmax / 5) * 3>>

<<elseif $arousal gte ($arousalmax / 5) * 2>>

<<else>>

<</if>>
<</widget>>

<<widget "cards_naked_end">>
<<covered>>
<<if $submissive gte 1150>>
	"I-I have no clothes," you say. "C-could you give me something to cover with?"
<<elseif $submissive lte 850>>
	"You're really gonna leave me with no clothes?" you ask. "Give me a towel or something at least."
<<else>>
	"Could you give me a towel, at least?" you ask. "I'll be in danger like this."
<</if>>
<br><br>

Wren leans behind <<him>>, and opens a drawer. <<He>> feels inside, and produces a small towel. "You can have this," <<he>> says. "But you'll have to earn it. I think my friends here deserve some fun."
<br><br>

"Satisfy them with your mouth," <<he>> continues. "And I'll let you wear a towel."
<br><br>

<<if $promiscuity gte 55>>
	<<link [[Accept|Estate Cards Oral]]>><</link>><<promiscuous4>><<goralskill>>
	<br>
<<else>>
	<span class="blue">You're not promiscuous enough to take up such an offer.</span> But leaving with nothing will be dangerous.
	<br><br>

	<<link [[Accept|Estate Cards Oral]]>><<trauma 6>><<stress 6>><</link>><<gtrauma>><<gstress>>
	<br>
<</if>>
<<link [[Refuse|Estate Cards Oral Refuse]]>><</link>>
<br>
<</widget>>

<<widget "cards_play_options">>
<<if $estate.cards.desire is "chastity">>
	<<link [[Leave|Estate Cards Leave]]>><</link>>
	<br>
<<else>>
	<<link [[Play (0:01)|Estate Blackjack]]>><<pass 1>><</link>>
	<<if $estate.cards.state is "ride">>
		<span class="purple">Losing may increase arousal.</span> <<cards_virginity_warning>>
	<</if>>
	<<if _cards_desire is "kiss" and $player.virginity.kiss is true>>
		<span class="red">If you lose, Wren will take your first kiss.</span>
	<</if>>
	<br>
	<<link [[Leave|Estate Cards Leave]]>><<npcincr Wren love 1>><</link>><<llove>>
	<br>
<</if>>
<</widget>>

<<widget "cards_lap_return">>
<<if $estate.cards.state is "ride">>
	<<if $estate.cards.position is "pc_lap">>
		You sit down. Wren swings <<his>> leg over you, resuming the position.
	<<elseif $estate.cards.position is "wren_lap">>
		Wren sits down, and points at <<his>> lap. You swing a leg over, resuming the position.
	<<elseif $estate.cards.position is "penile">>
		You sit down. Wren swings <<his>> leg over you, resuming the position.
		<<cards_lap_clothes>>
		<<His>> pussy threatens your <<penis>> once more.
	<<elseif $estate.cards.position is "vaginal">>
		Wren sits down, and points at <<his>> lap. You swing a leg over, resuming the position.
		<<cards_lap_clothes>>
		<<His>> <<print $NPCList[0].penisdesc>> threatens your <<pussy>> once more.
	<<elseif $estate.cards.position is "anal">>
		Wren sits down, and points at <<his>> lap. You swing a leg over, resuming the position.
		<<cards_lap_clothes>>
		<<His>> <<print $NPCList[0].penisdesc>> threatens your <<bottom>> once more.
	<</if>>
	"Where were we?" <<he>> teases.
<<else>>

<</if>>
<</widget>>

<<widget "cards_lap_clothes">>
<<if $estate.cards.wren_bottoms is 1>>
	<<if $estate.cards.wren_under_bottoms is 1>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			<<He>> hitches up <<his>> skirt and pulls aside <<his>> panties.
		<<else>>
			<<He>> unzips <<his>> fly and pulls aside <<his>> briefs.
		<</if>>
	<<else>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			<<He>> hitches up <<his>> skirt.
		<<else>>
			<<He>> unzips <<his>> fly.
		<</if>>
	<</if>>
<<else>>
	<<if $estate.cards.wren_under_bottoms is 1>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			<<He>> pulls aside <<his>> panties.
		<<else>>
			<<He>> pulls aside <<his>> briefs.
		<</if>>
	<<else>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			Wren grinds against you for good measure.
		<<else>>
			Wren grinds against you for good measure.
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "cards_lap_clothes_intro">>
<<if $estate.cards.wren_bottoms is 1>>
	<<if $estate.cards.wren_under_bottoms is 1>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			Wren hitches up <<his>> skirt and pulls aside <<his>> panties,
		<<else>>
			Wren unzips <<his>> fly and pulls aside <<his>> briefs,
		<</if>>
		<<if $estate.cards.position is "penile">>
			<span class="lewd">revealing <<his>> pussy.</span>
		<<else>>
			<span class="lewd">revealing <<his>> <<print $NPCList[0].penisdesc>>.</span>
		<</if>>
	<<else>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			Wren hitches up <<his>> skirt,
		<<else>>
			Wren unzips <<his>> fly,
		<</if>>
		<<if $estate.cards.position is "penile">>
			<span class="lewd">revealing <<his>> pussy.</span>
		<<else>>
			<span class="lewd">revealing <<his>> <<print $NPCList[0].penisdesc>>.</span>
		<</if>>
	<</if>>
<<else>>
	<<if $estate.cards.wren_under_bottoms is 1>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>
			Wren pulls aside <<his>> panties,
		<<else>>
			Wren pulls aside <<his>> briefs,
		<</if>>
		<<if $estate.cards.position is "penile">>
			<span class="lewd">revealing <<his>> pussy.</span>
		<<else>>
			<span class="lewd">revealing <<his>> <<print $NPCList[0].penisdesc>>.</span>
		<</if>>
	<<else>>
		<<if $NPCName[$NPCNameList.indexOf("Wren")].pronoun is "f">>

		<<else>>

		<</if>>
	<</if>>
<</if>>

<</widget>>

<<widget "wren_sabotage_nude">>
<<if $estate.cards.wren_under_bottoms is 0 and $estate.cards.wren_exposed_text lt 2>>
	Wren walks to the door, keeping a hand over <<his>>
	<<if $NPCList[0].penis isnot "none">>
		<<print $NPCList[0].penisdesc>>.
	<<else>>
		pussy.
	<</if>>
	"C-Come on then," <<he>> says.
	<<set $estate.cards.wren_exposed_text to 2>>
<<elseif $estate.cards.wren_under_top is 0 and $NPCList[0].pronoun is "f" and $estate.cards.wren_exposed_ lt 1>>
	Wren walks to the door, keeping an arm over <<his>> <<print $NPCList[0].breastsdesc>>. "This is nothing," <<he>> lies. "I go topless on the beach all the time."
	<<set $estate.cards.wren_exposed_text to 1>>
<<elseif $estate.cards.wren_top is 0 or $estate.cards.wren_bottoms is 0 or $estate.cards.wren_under_top is 0 and !$estate.cards.wren_exposed_text>>
	Wren walks to the door without dressing. "Think I won't do it?" <<he>> asks.

	<<set $estate.cards.wren_exposed_text to 1>>
<<else>>
	Wren strides to the door.
<</if>>

<<if $exposed gte 2 and $uncomfortable.nude is true and $estate.cards.pc_exposed_text lt 2>>
	You're nervous about your nudity. <<He>> leans against the door frame. "You're coming too. You want to make sure I follow through, right?"
	<br><br>

	You follow, keeping your body covered as best you can.
	<br><br>
	<<set $estate.cards.pc_exposed_text to 2>>
<<elseif $exposed is 1 and $uncomfortable.underwear is true and $estate.cards.pc_exposed_text lt 1>>
	You're nervous about your state of dress. <<He>> leans against the door frame. "You're coming too. You want to make sure I follow through, right?"
	<br><br>

	You follow, keeping your body covered as best you can.
	<br><br>
	<<set $estate.cards.pc_exposed_text to 1>>
<<else>>
	<br><br>
<</if>>

<<if $estate.cards.wren_top is 0 or $estate.cards.wren_bottoms is 0 or $estate.cards.wren_under_top is 0 or $estate.cards.wren_under_bottoms is 0>>
	<<if $exposed gte 2 and $uncomfortable.nude is true and $estate.cards.pc_exposed_walk lt 3>>
		You walk across the estate beside Wren, <<his>> colleagues following behind. You can feel their ogling, but you suspect they're looking at Wren as well.
		<br><br>
		You pass a pair of Remy's other goons. They don't stop you, and look bemused by Wren's appearance. <<His>> pace quickens.
		<br><br>
		<<set $estate.cards.pc_exposed_walk to 3>>
	<<elseif $exposed is 1 and $uncomfortable.underwear is true and $estate.cards.pc_exposed_walk lt 2>>
		You walk across the estate beside Wren, <<his>> colleagues following behind. You can feel their ogling, but you suspect they're looking at Wren as well.
		<br><br>
		You pass a pair of Remy's other goons. They don't stop you, and look bemused by Wren's appearance. <<His>> pace quickens.
		<br><br>
		<<set $estate.cards.pc_exposed_walk to 2>>
	<<elseif !$estate.cards.pc_exposed_walk>>
		You walk across the estate behind Wren, alongside <<his>> colleagues. You pass a pair of Remy's other goons. They're distracted by Wren's appearance, and don't stop you.
		<br><br>
		<<set $estate.cards.pc_exposed_walk to 1>>
	<</if>>
<<else>>
	<<if $exposed gte 2 and $uncomfortable.nude is true and $estate.cards.pc_exposed_walk lt 3>>
		You walk across the estate. Wren insists you lead the way. You can feel <<him>> ogling your <<bottom>>. You pass a pair of Remy's other goons. They don't stop you, seeming content to leer.
		<br><br>
		<<set $estate.cards.pc_exposed_walk to 3>>
	<<elseif $exposed is 1 and $uncomfortable.underwear is true and $estate.cards.pc_exposed_walk lt 2>>
		You walk across the estate. Wren insists you lead the way. You can feel <<him>> ogling your <<bottom>>. You pass a pair of Remy's other goons. They don't stop you, seeming content to leer.
		<br><br>
		<<set $estate.cards.pc_exposed_walk to 2>>
	<<elseif !$estate.cards.pc_exposed_walk>>
		You walk across the estate beside Wren and <<his>> colleagues. You pass a pair of Remy's other goons. One frowns, but they don't stop you. They must trust Wren.
		<br><br>
		<<set $estate.cards.pc_exposed_walk to 1>>
	<</if>>
<</if>>

<</widget>>

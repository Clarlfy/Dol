:: Widgets Bird [widget]
<<widget "bird_init">>
	<<set $bird to {}>>
	<<set $bird.lock to 1>>
	<<set $bird.rope to 0>>
	<<set $bird.fabric to 0>>
	<<set $bird.loot to {}>>
	<<set $bird.loot.lurker to 100>>
	<<set $bird.loot.trash to 0>>
	<<set $bird.loot.valuables to 0>>
	<<set $bird.loot.food to 0>>
	<<set $bird.loot.clothes to 0>>
	<<set $bird.state to "hunting">>
	<<set $bird.timer to 20>>
	<<set $bird.syndrome to 0>>
	<<set $bird.hunts to {
		unlocked: false,
		lurkers: false,
		materials: false,
		valuables: false,
		injured: 0
	}>>
	<<set $bird.materials to {
		wood: 0,
		cloth: 0,
		sticks: 0,
		leaves: 0,
		tools: false
	}>>
<</widget>>

<<widget "bird_loot">>
	<<set $bird.loot[_args[0]] += _args[1]>>
	<<set $bird.loot[_args[0]] to Math.clamp($bird.loot[_args[0]], 90, 2)>>
	<<set _bird_keys to Object.keys($bird.loot)>>
	<<for _s to 0; _s lt _bird_keys.length; _s++>>
		<<if _bird_keys[_s] isnot _args[0]>>
			<<set $bird.loot[_bird_keys[_s]] -= (_args[1] / 4)>>
			<<if $bird.loot[_bird_keys[_s]] lt 0>>
				<<set $bird.loot[_bird_keys[_s]] to Math.clamp($bird.loot[_bird_keys[_s]], 90, 2.5)>>
			<</if>>
		<</if>>
	<</for>>
<</widget>>

<<widget "bird_pass">>
	<<if _args[0]>>
		<<pass _args[0]>>
		<<if $bird.timer>>
			<<set $bird.timer -= _args[0]>>
			<<if $syndromebird isnot 1>>
				<<hunger _args[0]>>
				<<if $hunger gte 2000>>
					<<trauma `_args[0] / 4`>>
					<<physique_loss `_args[0] / 10`>>
					<<willpower `_args[0] / 10`>>
				<</if>>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "bird_loot_select">>
	<<rng>>
	<<set _bird_loot_selector to 0>>
	<<set _bird_keys to Object.keys($bird.loot)>>
	<<for _s to 0; _s lt _bird_keys.length; _s++>>
		<<set _bird_loot_selector += $bird.loot[_bird_keys[_s]]>>
		<<if _bird_loot_selector gte $rng>>
			<<switch _s>>
			<<case 0>>
				<<set _bird_loot_select to "lurker">>
			<<case 1>>
				<<set _bird_loot_select to "trash">>
			<<case 2>>
				<<set _bird_loot_select to "valuables">>
			<<case 3>>
				<<set _bird_loot_select to "food">>
			<<case 4>>
				<<set _bird_loot_select to "clothes">>
			<<default>>
				<<bird_loot_random>>
			<</switch>>
			<<break>>
		<</if>>
	<</for>>
<</widget>>

<<widget "bird_loot_random">>
	<<set _rng to random(1, 5)>>
	<<switch _rng>>
		<<case 0>>
			<<set _bird_loot_select to "lurker">>
		<<case 1>>
			<<set _bird_loot_select to "trash">>
		<<case 2>>
			<<set _bird_loot_select to "valuables">>
		<<case 3>>
			<<set _bird_loot_select to "food">>
		<<default>>
			<<set _bird_loot_select to "clothes">>
	<</switch>>
<</widget>>

<<widget "select_random_clothes">>/*Selects random clothes from shops. Sets _random_clothes to the item name, and _random_index to its index. Ignores forest shop, and secondary parts of outfits. _random_clothes outputs "piece of fabric" when clothes are ignored this way.*/
	<<set _random_slot to either(setup.clothingLayer.body)>>
	<<set _random_index to random(0, (setup.clothes[_random_slot].length - 1))>>
	<<if !setup.clothes[_random_slot][_random_index].shop.includes("forest") and setup.clothes[_random_slot][_random_index].shop.length gt 0 and !setup.clothes[_random_slot][_random_index].outfitSecondary and setup.clothes[_random_slot][_random_index].cursed isnot 1 and !setup.clothes[_random_slot][_random_index].type.includes("eerie") and !setup.clothes[_random_slot][_random_index].type.includes("naked")>>
		<<set _random_clothes to setup.clothes[_random_slot][_random_index].name>>
	<<else>>
		<<set _random_clothes to "piece of fabric">>
	<</if>>
<</widget>>

<<widget "bird_hunt_return">>
	<<bird_loot_select>>
	<<set $bird.timer to random(30, 90)>>
	<<set $bird.state to "home">>
	<<switch _bird_loot_select>>
	<<case "lurker">>
		<<bHe>> carries a strange, leathery and many-limbed creature in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. <<bHe>> dumps it at your feet, then tears out a chunk of flesh.
		<<if $monster is 1>>
			<<bHe>> hungrily rips into the meat with <<bhis>> teeth.
			"<<print either(
			"Common prey here. Their meat is soft.",
			"It won't bite. Promise.",
			"You can eat by yourself, yes? I don't need to feed you like baby bird?",
			"Nasty creatures, but nourishing.",
			"Keep your strength up.",
			"They're egg eaters, don't feel bad for them.",
			"Food for you.",
			"Great Hawk hunts well.",
			"Fresh kill. Should go down easy."
			)>>"
		<<else>>
			<<bHe>> holds <<bhis>> head back as <<bhe>> swallows the meat whole.
		<</if>>
		<<bHe>> looks at you, waiting for a response.
		<br><br>

		<<if $syndromebird is 1>>
			<<link [[Eat|Bird Tower Lurker]]>><<hunger -2000>><<bird_loot lurker 5>><<trauma -6>><<transform bird 1>><<npcincr "Great Hawk" love 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<ltrauma>><<lllhunger>>
			<br>
		<<else>>
			<<link [[Eat|Bird Tower Lurker]]>><<set $hunger to 1>><<bird_loot lurker 5>><<transform bird 1>><<npcincr "Great Hawk" love 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<lllhunger>>
			<br>
		<</if>>
		<<link [[Scold|Bird Tower Lurker Scold]]>><<bird_loot lurker -20>><<transform bird 1>><<npcincr "Great Hawk" dom -1>><<def 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Lurker Nothing]]>><<bird_loot lurker -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<case "trash">>
		<<bHe>> carries
		<<rng 10>>
		<<switch $rng>>
		<<case 1>>
			an empty crisp packet
		<<case 2>>
			an empty drink can
		<<case 3>>
			an empty tin can
		<<case 4>>
			an empty chocolate wrapper
		<<case 5>>
			a plastic bag
		<<case 6>>
			half a plastic bottle
		<<case 7>>
			a bottle cap
		<<case 8>>
			a plastic straw
		<<case 9>>
			a plastic lid
		<<default>>
			a ruined shoe
		<</switch>>
		in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>.
		<<if $monster is 1>>
			"<<print either(
			"Things from humans.",
			"Wingless ones, so wasteful.",
			"Do landbound ones value these?",
			"Trinkets? I enjoy collecting things like this.",
			"Not my best hunt."
			)>>"
		<</if>>
			<<bHe>> drops it at your feet, then looks at you, awaiting your response.
		<br><br>

		<<link [[Thank|Bird Tower Trash]]>><<bird_loot trash 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
		<br>
		<<link [[Scold|Bird Tower Trash Scold]]>><<bird_loot trash -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<def 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Trash Nothing]]>><<bird_loot trash -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<case "valuables">>
		<<if $monster is 1>>
			"<<print either(
			"I found shiny things.",
			"Treasures from the landbound.",
			"Couldn't help it, too shiny.",
			"For you?",
			"Snatched from wingless ones.",
			"Looks valuable. Made me think of you.",
			"Treasures for you."
			)>>"
		<</if>>
		<<bHe>> carries
		<<rng 5>>
		<<switch $rng>>
		<<case 1>>
			a watch in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Watch]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<case 2>>
			a necklace in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Necklace]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<case 3>>
			a wedding ring in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Ring]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<case 4>>
			a wallet in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen, but there might be money or other valuables inside. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Wallet]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<default>>
			a purse in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen, but there might be money or other valuables inside. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Wallet]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<</switch>>
		<<link [[Scold|Bird Tower Valuables Scold]]>><<bird_loot valuables -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Valuables Nothing]]>><<bird_loot valuables -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<case "food">>
		<<bHe>> carries
		<<rng 10>>
		<<switch $rng>>
		<<case 1>>
			a half-eaten pasty<<set $bird_food to "pasty">>
		<<case 2>>
			a donut<<set $bird_food to "donut">>
		<<case 3>>
			a bag of nuts<<set $bird_food to "nuts">>
		<<case 4>>
			a bag of crisps<<set $bird_food to "crisps">>
		<<case 5>>
			a large chocolate bar<<set $bird_food to "chocolate">>
		<<case 6>>
			an apple<<set $bird_food to "apple">>
		<<case 7>>
			a carrot<<set $bird_food to "carrot">>
		<<case 8>>
			a tin of baked beans<<set $bird_food to "beans">>
		<<case 9>>
			a tin of tuna<<set $bird_food to "tuna">>
		<<default>>
			a tin of custard<<set $bird_food to "custard">>
		<</switch>>
		in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>.
		<<if $monster is 1>>
			"<<print either(
			"Saw wingless ones eating these.",
			"Maybe more your taste?",
			"Food for you.",
			"Don't understand landbound tastes, but for you...",
			"Wingless ones left their food unguarded. Poor move.",
			"Smelled from far away. Easy to take.",
			"Scavenged from landbound ones. No prey today."
			)>>"
		<</if>>
		<<bHe>> drops it at your feet, then looks at you, awaiting your response.
		<br><br>

		<<link [[Eat|Bird Tower Food]]>><<bird_loot food 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<lhunger>>
		<br>
		<<link [[Scold|Bird Tower Food Scold]]>><<bird_loot food -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<def 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Food Nothing]]>><<bird_loot food -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<default>>
		<<bHe>> carries
		<<select_random_clothes>>
		<<if setup.clothes[_random_slot][_random_index].plural isnot 1>>
			a
		<</if>>
		_random_clothes in <<bhis>> <<if $monster is 1>>talons<<else>>beak<</if>>.
		<<if $monster is 1>>
			"<<print either(
			"You looked cold.",
			"I don't understand how you wear these, but... here.",
			"This is how wingless attract mates, yes?",
			"Colours caught my eye from far.",
			"Your plumage is pleasing, I thought this would help.",
			"Landbound left this out of sight. Yelled at me as I flew off with it.",
			"I like how this feels. Do you?",
			"Hope this helps keep you warm when I'm away. These... do help you stay warm, right?"
			)>>"
		<</if>>
		<<bHe>> drops
		<<if setup.clothes[_random_slot][_random_index].plural isnot 1>>
			it
		<<else>>
			them
		<</if>>
		at your feet, then looks at you, awaiting your response.
		<br><br>

		<<if $worn[_random_slot].name isnot "naked" and _random_clothes isnot "piece of fabric">>
			<<link [[Wear|Bird Tower Clothes]]>><<generalWear _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<set $bird.fabric += 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<span class="blue">Your $worn[_random_slot].name will be replaced.</span><<gfabric>>
		<<elseif _random_clothes isnot "piece of fabric">>
			<<link [[Wear|Bird Tower Clothes]]>><<generalWear _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
		<</if>>
		<br>
		<<link [[Thank|Bird Tower Fabric]]>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<set $bird.fabric += 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<gfabric>>
		<br>
		<<link [[Scold|Bird Tower Clothes Scold]]>><<bird_loot clothes -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<def 1>><<set $bird.fabric += 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>><<gfabric>>
		<br>
		<<link [[Do nothing|Bird Tower Clothes Nothing]]>><<bird_loot clothes -10>><<npcincr "Great Hawk" love -1>><<set $bird.fabric += 1>><</link>><<llove>><<gfabric>>
		<br>
	<</switch>>
<</widget>>

<<widget "bird_stockholm">>
	<<if _args[0] and $bird.syndrome isnot undefined>>
		<<set $bird.syndrome += _args[0]>>
	<</if>>
<</widget>>

<<widget "gbirdstockholm">>
	<<if $syndromebird isnot 1>>
		<<gstockholm>>
	<</if>>
<</widget>>

<<widget "bird_schedule">>
	<<if Time.hour gte 21 or Time.hour lte 5>>
		<<set $bird.activity to "sleep">>
	<<elseif Time.hour lte 9>>
		<<set $bird.activity to "sing">>
	<<elseif Time.hour lte 12>>
		<<set $bird.activity to "bathe">>
	<<elseif Time.hour lte 15>>
		<<set $bird.activity to "build">>
	<<elseif Time.hour lte 17>>
		<<set $bird.activity to "groom">>
	<<else>>
		<<set $bird.activity to "sing">>
	<</if>>
<</widget>>

<<widget "bird_greeting">>
	<<if $daily.birdGreeting isnot 1>>
		<<set $daily.birdGreeting to 1>>
		<<if $monster is 1>>
			<<if Time.hour lte 3 or Time.hour gte 18>>
				"Good evening,
			<<elseif Time.hour lte 12>>
				"Good morning,
			<<else>>
				"Good afternoon,
			<</if>>
			<<wife>>."
		<<else>>
			<<bHe>> greets you with a few low chirps.
		<</if>>
	<</if>>
<</widget>>

<<widget "hawkRescueSetup">>
	<<if $moor_hunt gte 1>>
		<<enable_rescue>>
	<<else>>
		<<set $_rescueChance to 5>>
		<<if $harpy gte 6>><<set $_rescueChance += 5>><</if>>
		<<if $syndromebird gte 1>><<set $_rescueChance += 10>><</if>>
		<<if $enemynomax gte 3>><<set $_rescueChance += 10>><</if>>
		<<if $enemytype is "man">><<set $_rescueChance += 5>><</if>>
		<<set $_rescueChance += Math.floor($moor / 5)>>
		<<if $_rescueChance gte random(1, 100)>><<enable_rescue>><</if>>
	<</if>>
	<<if $bird.hunts and $bird.hunts.injured gt 1>>
		<<set $_rescueChance to 0>>
	<</if>>
<</widget>>

<<widget "hawkScreechDesc">>
	<<if $syndromebird>>welcome<<elseif C.npc["Great Hawk"].init is 1>>familiar, terrifying<<else>>terrifying<</if>> screech
<</widget>>

<<widget "hawkRescueApproachSentence">>
	<<if $syndromebird is 1>>Salvation<<else>>Terror<</if>> <<print ["circles above", "approaches", "descends", "shadows you"][random($weather is "clear" ? 3 : 2)]>>.
<</widget>>

<<widget "bird_perch_options">>
	<<if $bird.state is "hunting" and $bird.timer lte 0>>
		<<endevent>>
		<<npc "Great Hawk">>
		You hear the flap of wings as the <<beasttype>> returns.

		<<bHe>> lands and <<if $monster is 1>>walks<<else>>hops<</if>> over to you.
		<<bird_hunt_return>>
	<<elseif $bird.state is "home" and $bird.activity isnot "sleep" and $bird.activity isnot "sing" and $bird.activity isnot "groom" and $bird.timer lte 0 and $bird.hunts.injured is 0>>
		<<endevent>>
		<<npc "Great Hawk">>
		<<if $monster is 1>>
			The <<beasttype>><<if $birdBask is 1>> gingerly helps you stand, and<</if>> steps to the edge of the perch.
			"<<print either(
				"I crave a hunt.",
				"The wild beckons me.",
				"My talons itch for prey.",
				"The winds call me.",
				"I must stretch my wings."
			)>> I will return with a gift."
		<<else>>
			The <<beasttype>> rises from <<bhis>> nest, looking out over the moor. <<bHis>> gaze is harsh. <<bHe>> seems to be looking to hunt.
		<</if>>
		<<unset $birdBask>>
		<br><br>

		<<if $harpy gte 6 and $syndromebird is 1>>
			<<if $bird.hunts.unlocked is true>>
				<<flight_time_check 30 "silent">>
				<<print '<<link [[Join the hunt ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Tower Hunt Ask]]>><</link>>'>><<print _fatigueText>>
				<br>
				<<link [[Stay|Bird Tower No Hunt]]>><</link>>
				<br>
			<<else>>
				<<link [[Ask to join the hunt|Bird Tower Hunt Ask]]>><</link>>
				<br>
				<<link [[Say nothing|Bird Tower No Hunt]]>><</link>>
				<br>
			<</if>>
		<<else>>
			<<bHe>> spreads <<bhis>> wings and launches from the tower.
			<br><br>
			<<set $bird.timer to random(30, 60)>>
			<<set $bird.state to "hunting">>
			<<unset $birdPerch>>
			<<link [[Next|Bird Tower Perch]]>><<endevent>><</link>>
			<br>
		<</if>>
	<<elseif $bird.activity is "sleep" and $birdSleep is undefined and $bird.state is "home">>
		<<set $birdSleep to 1>><<unset $birdPerch>><<unset $birdBask>>
		<<endevent>>
		<<npc "Great Hawk">>
		<<if $monster gte 1>>
			The <<beasttype>> scoops you in <<bhis>> arms. "Night has come," <<bhe>> says. "Let me take you to bed."
			<br><br>
		<<else>>
			The <<beasttype>> hops from the perch, towards the nest. <<bHe>> glances at you.
			<br><br>
		<</if>>

		<<link [[Nest|Bird Tower Perch Nest]]>><</link>>
		<br>
		<<link [[Stay up|Bird Tower]]>><<endevent>><</link>>
		<br>
	<<elseif $syndromebird is 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $birdBask is undefined and $bird.state is "home">>
		<<baskicon>><<link [[Bask (0:30)|Bird Tower Bask]]>><<bird_pass 30>><<stress -12>><<endevent>><</link>><<llstress>><br>
		<<mooricon "sing">><<link [[Sing (0:30)|Bird Tower Sing]]>><<transform bird 1>><<bird_pass 30>><<trauma -3>><<endevent>><</link>><<ltrauma>><br>
		<<if $syndromebird and $lurkers_held gte 1 and $bird.state is "home" and ["sing", "groom"].includes($bird.activity)>>
			<<ind>><<link "Give <<bhim>> the lurker" "Bird Tower Give Captured Lurker">><</link>> <<glove>>
			<br>
		<</if>>
		<<getouticon>><<link [[Go back inside|Bird Tower]]>><<unset $birdPerch>><<endevent>><</link>><br>
		<br>
		<<bird_fly_options>>
	<<elseif $birdBask is 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
		<<baskicon>><<link [[Continue to bask (0:30)|Bird Tower Bask]]>><<bird_pass 30>><<stress -12>><<endevent>><</link>><<llstress>><br>
		<<mooricon "sing">><<link [[Sing (0:30)|Bird Tower Sing]]>><<transform bird 1>><<bird_pass 30>><<trauma -3>><<endevent>><</link>><<ltrauma>><br>
		<<ind>><<link [[Get up|Bird Tower Perch]]>><<set $birdBask to 0>><<endevent>><</link>><br>
		<<getouticon>><<link [[Leave|Bird Tower Bask Leave]]>><<unset $birdBask>><<unset $birdPerch>><<endevent>><</link>><br>
	<<else>>
		<<if $birdSingIntro is 1>>
			<<mooricon "sing">><<link [[Sing (0:30)|Bird Tower Sing]]>><<set $birdSingAbsent to 1>><<bird_pass 30>><<trauma -3>><<endevent>><</link>><<ltrauma>><br>
		<</if>>
		<<getouticon>><<link [[Go back inside|Bird Tower]]>><<unset $birdPerch>><<endevent>><</link>><br>
		<br>
		<<bird_fly_options>>
	<</if>>
	<<unset $birdSingAbsent>>
<</widget>>

<<widget "bird_fly_options">>
	<<if $harpy gte 6>>
		The wind could carry you a long way<<if $birdFly isnot 1>>, <span class="red">but you don't know how to fly.</span> Your wings should at least carry you down safely<</if>>.
		<<if $syndromebird isnot 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
			<span class="red">However, you won't be getting far with the Great Hawk watching you.</span>
			<br><br>
		<<else>>
			<br>
			<<mooricon "tower">><<link [[Glide to the base of the tower (0:01)|Bird Tower Glide 2]]>><<unset $birdPerch>><<bird_pass 1>><<endevent>><</link>><<flight_text>><br>
		<</if>>
		<<if $birdFly isnot 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
			<<askicon>><<link [[Ask the Great Hawk to teach you to fly|Bird Tower Fly Intro]]>><</link>><<flight_text>><br>
		<<elseif $birdFly is 1>>
			<br>
			<<flight_time_check 60>>
			<<if $bird.hunts.unlocked is true and ($bird.hunts.lurkers is true or $bird.hunts.materials is true or $bird.hunts.valuables is true)>>
				<<ind>><<link [[Prepare for a hunt|Bird Hunt Start]]>><</link>><<flight_text>><br>
				<br>
			<</if>>
			<<if $exposed gte 2 and $exhibitionism lt 55>>
				<span class="red">You aren't lewd enough to fly exposed towards the town or farmlands.</span>
				<br>
			<<else>>
				<<farmicon>><<print '<<link [[Fly to the farmlands ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Tower Farmlands]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<unset $birdPerch>><<bird_pass _flightTime>><<endevent>><</link>>'>><<flight_text>><<print _fatigueText>><<if $exposed gte 2>><<exhibitionist4>><</if>>
				<br>
				<<entertownicon>><<print '<<link [[Fly to town ('+_hoursPassedLong+':'+ (_minutesPassedLong lt 10 ? "0" : "") + _minutesPassedLong + ')|Bird Tower Town]]>><<set $fatigueMod to (_fatigueMod + 1)>><<set $flightTime to _flightTimeLong>><<unset $birdPerch>><<bird_pass _flightTimeLong>><<endevent>><</link>>'>><<flight_text>><<print _fatigueText>><<if $exposed gte 2>><<exhibitionist4>><</if>>
				<br>
			<</if>>
			<<foresticon>><<print '<<link [[Fly to the forest ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Tower Forest]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<unset $birdPerch>><<bird_pass 30>><<endevent>><</link>>'>><<flight_text>><<print _fatigueText>>
			<br>
		<</if>>
	<<elseif $angel gte 6 or $demon gte 6 or $fallenangel gte 2>>
		<<if $pain gte 20>>
			Your wings should carry you down, <span class="purple">but you're too injured for such a risky jump right now.</span>
			<br><br>
		<<else>>
			Your wings should carry you down.
			<<if $syndromebird isnot 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
				<span class="red">However, you won't be getting far with the Great Hawk watching you.</span>
				<br><br>
			<<elseif $birdFly is 1 or $birdGlide is 1>>
				<br><br>
				<<glideicon>><<link [[Glide down (0:02)|Bird Tower Glide]]>><<unset $birdPerch>><<bird_pass 2>><<endevent>><</link>><<flight_text>>
			<<elseif currentSkillValue('willpower') lt 250>>
				<span class="red">But you don't have the will or courage to attempt it.</span>
			<<elseif $daily.glideScared>>
				<span class="red">You're too scared to try again right now.</span>
			<<else>>
				<br><br>
				<<glideicon>><<link [[Attempt to glide down (0:02)|Bird Tower Glide Attempt]]>><<unset $birdPerch>><<bird_pass 2>><<endevent>><</link>><<flight_text>><<willpowerdifficulty 250 1100>>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "flight_time_check">>
	<<if _args[0]>>
		<<set _flightTimeBase to _args[0]>>
	<<else>>
		<<set _flightTimeBase to 60>>
	<</if>>
	<<if $bird.hunts and $bird.hunts.weight>>
		<<set _flightTimeBase += $bird.hunts.weight>>
	<</if>>
	<<set _flightTime to _flightTimeBase>>
	<<switch $weather>>
		<<case "overcast">>
			<<set _flightTime -= Math.floor(_flightTimeBase / 3)>>
			<<set _fatigueText to "<<gtiredness>>">>
			<<set _fatigueMod to 0.5>>
			<<if _args[1] isnot "silent">><span class="gold">The strong winds will make flight easy and fast.</span><</if>>
		<<case "rain">>
			<<set _flightTime += 1>>
			<<for _active_clothes range Object.keys($worn)>>
				<<if !$worn[_active_clothes].type.includes("naked") and !$worn[_active_clothes].type.includes("swim")>>
					<<switch _active_clothes>>
						<<case "over_upper" "over_lower">>
							<<set _flightTime += Math.floor(_flightTimeBase / 6)>>
						<<case "upper" "lower">>
							<<set _flightTime += Math.floor(_flightTimeBase / 9)>>
						<<case "under_upper" "under_lower" "feet">>
							<<set _flightTime += Math.floor(_flightTimeBase / 18)>>
						<<default>>
					<</switch>>
					<<set _slowText to true>>
				<</if>>
			<</for>>
			<<if _slowText>>
				<<if _flightTime gte Math.floor(_flightTimeBase + (_flightTimeBase * 0.5))>>
					<<set _fatigueText to "<<gggtiredness>>">>
					<<set _fatigueMod to 3>>
					<<if _args[1] isnot "silent">><span class="red">Flying in the rain will soak your clothes, heavily slowing you down and exposing you.</span><</if>>
				<<elseif _flightTime gte Math.floor(_flightTimeBase + (_flightTimeBase * 0.25))>>
					<<set _fatigueText to "<<gggtiredness>>">>
					<<set _fatigueMod to 3>>
					<<if _args[1] isnot "silent">><span class="pink">Flying in the rain will soak your clothes, slowing you down and exposing you.</span><</if>>
				<<elseif _flightTime gt _flightTimeBase>>
					<<set _fatigueText to "<<ggtiredness>>">>
					<<set _fatigueMod to 2>>
					<<if _args[1] isnot "silent">><span class="blue">Flying in the rain will soak your clothes, slightly slowing you down and exposing you.</span><</if>>
				<<else>>
					<<set _fatigueText to "<<gtiredness>>">>
					<<set _fatigueMod to 2>>
					<<if _args[1] isnot "silent">><span class="green">Flying in the rain won't slow you down at all in your current state of dress.</span><</if>>
				<</if>>
			<<else>>
				<<set _fatigueText to "<<gtiredness>>">>
				<<set _fatigueMod to 2>>
				<<if _args[1] isnot "silent">><span class="green">Flying in the rain won't slow you down at all in your current state of dress.</span><</if>>
			<</if>>
		<<case "snow">>
			<<set _flightTime += Math.floor(_flightTimeBase / 6)>>
			<<set _fatigueText to "<<ggtiredness>>">>
			<<set _fatigueMod to 2>>
			<<if _args[1] isnot "silent">><span class="blue">Flying in the snow will obscure your vision and slow you down.</span><</if>>
		<<default>>
			<<set _fatigueText to "<<gtiredness>>">>
			<<set _fatigueMod to 1>>
			<<if _args[1] isnot "silent">><span class="green">The weather shouldn't affect your flight.</span><</if>>
	<</switch>>
	<<if _args[1] isnot "silent">><br><</if>>
	<<if currentSkillValue('athletics') gt 0>>
		<<set _flightTime -= Math.floor((_flightTime / 20) * (currentSkillValue('athletics') / 100))>>
	<</if>>
	<<if _flightTime lte 0>>
		<<set _flightTime to 1>>
	<</if>>
	<<set _hoursPassed to Math.floor(_flightTime / 60)>>
	<<set _minutesPassed to _flightTime % 60>>

	<<set _flightTimeLong to Math.floor(_flightTime + 15)>>
	<<set _hoursPassedLong to Math.floor(_flightTimeLong / 60)>>
	<<set _minutesPassedLong to _flightTimeLong % 60>>

	<<set _flightTimeSearch to Math.floor(_flightTime + 3)>>
	<<set _hoursPassedSearch to Math.floor(_flightTimeSearch / 60)>>
	<<set _minutesPassedSearch to _flightTimeSearch % 60>>
<</widget>>

<<widget "flight_effects">>
	<<if $weather is "rain">>
		<<if !$worn.upper.type.includes("swim") and !$worn.upper.type.includes("naked")>>
			<<set $upperwet += Math.floor($flightTime * 4)>>
		<</if>>
		<<if !$worn.lower.type.includes("swim") and !$worn.lower.type.includes("naked")>>
			<<set $lowerwet += Math.floor($flightTime * 4)>>
		<</if>>
		<<if !$worn.under_lower.type.includes("swim") and !$worn.under_lower.type.includes("naked")>>
			<<set $underlowerwet += Math.floor($flightTime * 4)>>
		<</if>>
		<<if !$worn.under_upper.type.includes("swim") and !$worn.under_upper.type.includes("naked")>>
			<<set $underupperwet += Math.floor($flightTime * 4)>>
		<</if>>
	<</if>>
	<<set _tempTired to (Math.floor($flightTime / 4) + 1)>>
	<<tiredness _tempTired>>
	<<unset $flightTime>>
	<<unset $fatigueMod>>
<</widget>>

<<widget "flight_distance_check">>
	<<set _totalDistance to (Math.abs($Bird.hunts.distanceNorth) + Math.abs($Bird.hunts.distanceEast))>>
	<<set _returnTime to (5 * _totalDistance)>>
<</widget>>

<<widget "flight_hunt_options">>
	<<flight_time_check 20 "silent">>
	<<if $bird.hunts.goal is "hawk">>
		<<set _directionPool to []>>
		<<if $bird.hunts.distanceNorth lt 5 and $bird.hunts.distanceNorth isnot -1>>
			<<run _directionPool.pushUnique("north")>>
		<</if>>
		<<if $bird.hunts.distanceEast lt 5 and $bird.hunts.distanceEast isnot -1>>
			<<run _directionPool.pushUnique("east")>>
		<</if>>
		<<if $bird.hunts.distanceNorth gt -5 and $bird.hunts.distanceNorth isnot 1>>
			<<run _directionPool.pushUnique("south")>>
		<</if>>
		<<if $bird.hunts.distanceEast gt -5 and $bird.hunts.distanceEast isnot 1>>
			<<run _directionPool.pushUnique("west")>>
		<</if>>
		<<set $bird.hunts.direction to _directionPool.pluck()>>
		<<switch $bird.hunts.direction>>
			<<case "north">><<set _distanceNorth to 1>><<set _distanceEast to 0>>
			<<case "east">><<set _distanceNorth to 0>><<set _distanceEast to 1>>
			<<case "south">><<set _distanceNorth to -1>><<set _distanceEast to 0>>
			<<case "west">><<set _distanceNorth to 0>><<set _distanceEast to -1>>
		<</switch>>
		<<capture _distanceNorth _distanceEast _hoursPassed _minutesPassed _fatigueMod _flightTime _fatigueText>>
			<<print `<<link [[Continue hunting ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.distanceNorth += _distanceNorth>><<set $bird.hunts.distanceEast += _distanceEast>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>`>><<print _fatigueText>>
			<br>
		<</capture>>
		<br>
		<<link [[Ask to hunt for something else|Bird Hunt Goal]]>><<endevent>><<set $phase to 1>><</link>>
		<br>
		<<flight_time_check _returnTime "silent">>
		<<print '<<link [[Ask to return to the castle ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Return Ask]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
		<br>		
	<<else>>
		<<capture _hoursPassed _minutesPassed _fatigueMod _flightTime _fatigueText>>
			<<if $bird.hunts.distanceNorth lt 5>>
				<<print '<<link [[North ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "north">><<set $bird.hunts.distanceNorth++>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
			<<if $bird.hunts.distanceEast lt 5>>
				<<print '<<link [[East ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "east">><<set $bird.hunts.distanceEast++>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
			<<if $bird.hunts.distanceNorth gt -5>>
				<<print '<<link [[South ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "south">><<set $bird.hunts.distanceNorth-->><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
			<<if $bird.hunts.distanceEast gt -5>>
				<<print '<<link [[West ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "west">><<set $bird.hunts.distanceEast-->><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
		<</capture>>
		<br>
	
		<<link [[Hunt for something else|Bird Hunt Goal]]>><<endevent>><<set $phase to 1>><</link>>
		<br>
		<<flight_time_check _returnTime "silent">>
		<<print '<<link [[Return to the castle ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Return]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><<endevent>><<set $phase to 1>><</link>>'>><<print _fatigueText>>
		<br>
	<</if>>
<</widget>>

<<widget "flight_hunt_return">>
	<<if ($bird.hunts.weight gte 3 and $bird.hunts.duo is false) or $bird.hunts.weight gte 5>>
		You won't be able to carry any more. You begin to fly back to the tower.
		<br><br>

		<<flight_distance_check>>
		<<flight_time_check _returnTime "silent">>
		<<print '<<link [[Return to the castle ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Return]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><<endevent>><</link>>'>><<print _fatigueText>>
		<br>
	<<else>>
		You return to the higher skies.
		<br><br>

		<<endevent>>
		<<if _huntFail is 1>><<set $phase to 2>><</if>>
		<<flight_hunt_options>>
	<</if>>
<</widget>>

<<widget "flight_hunt_chance">>
	<<if $bird.hunts.goal is "hawk">>
		<<bird_loot_select>>
		<<switch _bird_loot_select>>
			<<case "food" "lurker">><<set $_goal to "lurkers">>
			<<case "trash" "clothes">><<set $_goal to "materials">>
			<<case "valuables">><<set $_goal to "valuables">>
		<</switch>>
	<<else>>
		<<set $_goal to $bird.hunts.goal>>
	<</if>>
	<<set _flight_hunt_chance to {
		nothing: 1,
		lurkers: random(0.5, 1.5),
		materials: random(0.5, 1),
		valuables: random(0, 1),
		other: 0.5
	}>>
	<<set _flight_hunt_chance[$_goal] += ($bird.hunts.goal is "hawk" ? 3 : 1 + (currentSkillValue("skulduggery") / 500).toFixed(2))>>
	<<if $weather is "rain" or $weather is "snow">>
		<<set _flight_hunt_chance.nothing++>>
	<</if>>
	<<if $bird.hunts.goal is "hawk">>
		<<set _flight_hunt_chance.nothing to 0>>
	<</if>>
<</widget>>

<<widget "flight_hunt_get">>
	<<if !_args[0]>>
		<<run Errors.report("No argument specified for widget flight_hunt_get")>>
	<<elseif typeof _args[0] isnot "string">>
		<<run Errors.report("Non-string provided as first argument for widget flight_hunt_get")>>
	<<elseif !_args[1] or typeof !_args[1] isnot "number">>
		<<run Errors.report("No number argument specified for widget flight_hunt_get")>>
	<<else>>
		<<set $_looted to _args[0]>><<set $_amount to _args[1]>>
		<<if $bird.materials[$_looted] is undefined>>
			<<run Errors.report("Invalid loot of type; " + $_looted)>>
		<<else>>
			<<if $bird.hunts.loot[$_looted] is undefined>>
				<<run $bird.hunts.loot.pushUnique($_looted : 0)>>	
			<</if>>
			<<set $bird.hunts.loot[$_looted] += $_amount>>
			<<set $bird.hunts.lootAmount += $_amount>>
		<</if>>
		<<switch $_looted>>
			<<case "toolbox">><<set $bird.hunts.weight += 2>>
			<<case "wood">><<set $bird.hunts.weight += (3 * $_amount)>>
			<<default>><<set $bird.hunts.weight += $_amount>>
		<</switch>>
	<</if>>
<</widget>>

<<widget "flight_hunt_loot">>
	You looted
	
	
	<<number $bird.hunts.lootAmount>>
	<<switch $bird.hunts.loot>>
		<<case "wood">>piece<<if $bird.hunts.lootAmount gt 1>>s<</if>> of wood.
		<<case "cloth">>piece<<if $bird.hunts.lootAmount gt 1>>s<</if>> of cloth.
	<</switch>>
	You add <<if $bird.hunts.lootAmount gt 1>>them<<else>>it<</if>> to the pile.
	<<run delete $bird.hunts.loot>>
	<<run delete $bird.hunts.lootAmount>>
<</widget>>

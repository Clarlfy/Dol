:: Widgets Bird [widget]
<<widget "bird_init">>
	<<set $bird to {}>>
	<<set $bird.lock to 1>>
	<<set $bird.rope to 0>>
	<<set $bird.fabric to 0>>
	<<set $bird.loot to {}>>
	<<set $bird.loot.lurker to 100>>
	<<set $bird.loot.trash to 0>>
	<<set $bird.loot.valuables to 0>>
	<<set $bird.loot.food to 0>>
	<<set $bird.loot.clothes to 0>>
	<<set $bird.state to "hunting">>
	<<set $bird.timer to 20>>
	<<set $bird.syndrome to 0>>
	<<set $bird.hunts to {
		unlocked: false,
		lurkers: false,
		materials: false,
		valuables: false,
		injured: 0
	}>>
	<<set $bird.materials to {
		wood: 0,
		fabric: 0,
		sticks: 0,
		leaves: 0,
		junk: 0,
		lurkers: 0,
		leather: 0,
		valuables: {}
	}>>
	<<set $bird.upgrades to {
		mirror: 0,
		tools: 0,
		tarp: 0,
		telescope: 0,
		shelter: 1,
		nest: 0,
		firepit: 0,
		pot: 0,
		rack: 0,
		snare: 0,
		decor: 0,
		wardrobe: 0
	}>>
<</widget>>

<<widget "bird_loot">>
	<<set $bird.loot[_args[0]] += _args[1]>>
	<<set $bird.loot[_args[0]] to Math.clamp($bird.loot[_args[0]], 90, 2)>>
	<<set _bird_keys to Object.keys($bird.loot)>>
	<<for _s to 0; _s lt _bird_keys.length; _s++>>
		<<if _bird_keys[_s] isnot _args[0]>>
			<<set $bird.loot[_bird_keys[_s]] -= (_args[1] / 4)>>
			<<if $bird.loot[_bird_keys[_s]] lt 0>>
				<<set $bird.loot[_bird_keys[_s]] to Math.clamp($bird.loot[_bird_keys[_s]], 90, 2.5)>>
			<</if>>
		<</if>>
	<</for>>
<</widget>>

<<widget "bird_pass">>
	<<if _args[0]>>
		<<pass _args[0]>>
		<<if $bird.timer>>
			<<set $bird.timer -= _args[0]>>
			<<if $syndromebird isnot 1>>
				<<hunger _args[0]>>
				<<if $hunger gte 2000>>
					<<trauma `_args[0] / 4`>>
					<<physique_loss `_args[0] / 10`>>
					<<willpower `_args[0] / 10`>>
				<</if>>
			<</if>>
		<</if>>
		<<if $bird.upgrades.shelter is 1 and ($weather is "rain" or $weather is "snow")>>
			<<if $birdShelterTimer is undefined>>
				<<set $birdShelterTimer to 720>>
			<<else>>
				<<set $birdShelterTimer -= _args[0]>>
			<</if>>
			<<if $birdShelterTimer lte 0>>
				<<set $bird.upgrades.shelter to 0>>
			<</if>>
		<<elseif $bird.upgrades.shelter is 0 and $bird.activty is "build">>
			<<set $bird.upgrades.shelter to 1>>
			<<set $birdShelterTimer to 720>>
			<<set $birdShelterRepair to true>>
		<</if>>
	<</if>>
<</widget>>

<<widget "bird_loot_select">>
	<<rng>>
	<<set _bird_loot_selector to 0>>
	<<set _bird_keys to Object.keys($bird.loot)>>
	<<for _s to 0; _s lt _bird_keys.length; _s++>>
		<<set _bird_loot_selector += $bird.loot[_bird_keys[_s]]>>
		<<if _bird_loot_selector gte $rng>>
			<<switch _s>>
			<<case 0>>
				<<set _bird_loot_select to "lurker">>
			<<case 1>>
				<<set _bird_loot_select to "trash">>
			<<case 2>>
				<<set _bird_loot_select to "valuables">>
			<<case 3>>
				<<set _bird_loot_select to "food">>
			<<case 4>>
				<<set _bird_loot_select to "clothes">>
			<<default>>
				<<bird_loot_random>>
			<</switch>>
			<<break>>
		<</if>>
	<</for>>
<</widget>>

<<widget "bird_loot_random">>
	<<set _rng to random(1, 5)>>
	<<switch _rng>>
		<<case 0>>
			<<set _bird_loot_select to "lurker">>
		<<case 1>>
			<<set _bird_loot_select to "trash">>
		<<case 2>>
			<<set _bird_loot_select to "valuables">>
		<<case 3>>
			<<set _bird_loot_select to "food">>
		<<default>>
			<<set _bird_loot_select to "clothes">>
	<</switch>>
<</widget>>

<<widget "select_random_clothes">>/*Selects random clothes from shops. Sets _random_clothes to the item name, and _random_index to its index. Ignores forest shop, and secondary parts of outfits. _random_clothes outputs "piece of fabric" when clothes are ignored this way.*/
	<<set _random_slot to either(setup.clothingLayer.body)>>
	<<set _random_index to random(0, (setup.clothes[_random_slot].length - 1))>>
	<<if !setup.clothes[_random_slot][_random_index].shop.includes("forest") and setup.clothes[_random_slot][_random_index].shop.length gt 0 and !setup.clothes[_random_slot][_random_index].outfitSecondary and setup.clothes[_random_slot][_random_index].cursed isnot 1 and !setup.clothes[_random_slot][_random_index].type.includes("eerie") and !setup.clothes[_random_slot][_random_index].type.includes("naked") and _random_slot isnot "handheld">>
		<<set _random_clothes to setup.clothes[_random_slot][_random_index].name>>
	<<else>>
		<<set _random_clothes to "piece of fabric">>
	<</if>>
<</widget>>

<<widget "select_random_clothes_limited">>/*Selects random clothes from shops from a provided pool of slots. Sets _random_clothes to the item name, and _random_index to its index. Ignores forest shop, and secondary parts of outfits. _random_clothes outputs "piece of fabric" when clothes are ignored this way.*/
	<<for $_slot range _args.length>>
		<<if !setup.clothingLayer.all.includes($_slot)>>
			<<run Errors.report("Invalid clothing slot provided of name " + $_slot + ", defaulting to piece of fabric")>>
			<<set _random_clothes to "piece of fabric">>
			<<break>>
		<</if>>
	<</for>>
	<<set _random_slot to either(_args)>>
	<<set _random_index to random(0, (setup.clothes[_random_slot].length - 1))>>
	<<if !setup.clothes[_random_slot][_random_index].shop.includes("forest") and setup.clothes[_random_slot][_random_index].shop.length gt 0 and !setup.clothes[_random_slot][_random_index].outfitSecondary and setup.clothes[_random_slot][_random_index].cursed isnot 1 and !setup.clothes[_random_slot][_random_index].type.includes("eerie") and !setup.clothes[_random_slot][_random_index].type.includes("naked")>>
		<<set _random_clothes to setup.clothes[_random_slot][_random_index].name>>
	<<else>>
		<<set _random_clothes to "piece of fabric">>
	<</if>>
<</widget>>

<<widget "bird_hunt_return">>
	<<bird_loot_select>>
	<<set $bird.timer to random(30, 90)>>
	<<set $bird.state to "home">>
	<<switch _bird_loot_select>>
	<<case "lurker">>
		<<bHe>> carries a strange, leathery and many-limbed creature in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. <<bHe>> dumps it at your feet, then tears out a chunk of flesh.
		<<if $monster is 1>>
			<<bHe>> hungrily rips into the meat with <<bhis>> teeth.
			"<<print either(
			"Common prey here. Their meat is soft.",
			"It won't bite. Promise.",
			"You can eat by yourself, yes? I don't need to feed you like baby bird?",
			"Nasty creatures, but nourishing.",
			"Keep your strength up.",
			"They're egg eaters, don't feel bad for them.",
			"Food for you.",
			"Great Hawk hunts well.",
			"Fresh kill. Should go down easy."
			)>>"
		<<else>>
			<<bHe>> holds <<bhis>> head back as <<bhe>> swallows the meat whole.
		<</if>>
		<<bHe>> looks at you, waiting for a response.
		<br><br>

		<<if $syndromebird is 1>>
			<<link [[Eat|Bird Tower Lurker]]>><<hunger -2000>><<bird_loot lurker 5>><<trauma -6>><<transform bird 1>><<npcincr "Great Hawk" love 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<ltrauma>><<lllhunger>>
			<br>
		<<else>>
			<<link [[Eat|Bird Tower Lurker]]>><<set $hunger to 1>><<bird_loot lurker 5>><<transform bird 1>><<npcincr "Great Hawk" love 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<lllhunger>>
			<br>
		<</if>>
		<<if $bird.hunts.lurkers is true>>
			<<link [[Keep it|Bird Tower Lurker Keep]]>><<bird_loot lurker 5>><<set $bird.matrials.lurkers++>><<transform bird 1>><<npcincr "Great Hawk" love 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<</if>>
		<<link [[Scold|Bird Tower Lurker Scold]]>><<bird_loot lurker -20>><<transform bird 1>><<npcincr "Great Hawk" dom -1>><<def 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Lurker Nothing]]>><<bird_loot lurker -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<case "trash">>
		<<bHe>> carries
		<<rng 10>>
		<<switch $rng>>
		<<case 1>>
			an empty crisp packet
		<<case 2>>
			an empty drink can
		<<case 3>>
			an empty tin can
		<<case 4>>
			an empty chocolate wrapper
		<<case 5>>
			a plastic bag
		<<case 6>>
			half a plastic bottle
		<<case 7>>
			a bottle cap
		<<case 8>>
			a plastic straw
		<<case 9>>
			a plastic lid
		<<default>>
			a ruined shoe
		<</switch>>
		in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>.
		<<if $monster is 1>>
			"<<print either(
			"Things from humans.",
			"Wingless ones, so wasteful.",
			"Do landbound ones value these?",
			"Trinkets? I enjoy collecting things like this.",
			"Not my best hunt."
			)>>"
		<</if>>
		<<bHe>> drops it at your feet, then looks at you, awaiting your response.
		<br><br>

		<<link [[Thank|Bird Tower Trash]]>><<bird_loot trash 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
		<br>
		<<link [[Scold|Bird Tower Trash Scold]]>><<bird_loot trash -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<def 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Trash Nothing]]>><<bird_loot trash -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<case "valuables">>
		<<if $monster is 1>>
			"<<print either(
			"I found shiny things.",
			"Treasures from the landbound.",
			"Couldn't help it, too shiny.",
			"For you?",
			"Snatched from wingless ones.",
			"Looks valuable. Made me think of you.",
			"Treasures for you."
			)>>"
		<</if>>
		<<bHe>> carries
		<<rng 5>>
		<<switch $rng>>
		<<case 1>>
			a watch in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Watch]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<case 2>>
			a necklace in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Necklace]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<case 3>>
			a wedding ring in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Ring]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<case 4>>
			a wallet in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen, but there might be money or other valuables inside. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Wallet]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<<default>>
			a purse in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>. It's probably stolen, but there might be money or other valuables inside. <<bHe>> drops it at your feet, then looks at you, awaiting your response.
			<br><br>
			<<link [[Take it|Bird Tower Wallet]]>><<bird_loot valuables 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<br>
		<</switch>>
		<<link [[Scold|Bird Tower Valuables Scold]]>><<bird_loot valuables -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Valuables Nothing]]>><<bird_loot valuables -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<case "food">>
		<<if $rng gte 96>>
			<<bHe>> carries a half-destroyed cup in <<bhis>> talons. Something leaks from it.
			<<if $monster is 1>>
				"Weak object, pierced through with talons," <<bhe>> says
			<<else>>
				<<bHe>> looks down at it in apparent confusion
			<</if>>
			before placing it at your feet. You smell it. It's a milkshake. Still fresh. <<set $bird_food to "milkshake">>
		<<else>>
			<<bHe>> carries
			<<rng 10>>
			<<switch $rng>>
			<<case 1>>
				a half-eaten pasty<<set $bird_food to "pasty">>
			<<case 2>>
				a donut<<set $bird_food to "donut">>
			<<case 3>>
				a bag of nuts<<set $bird_food to "nuts">>
			<<case 4>>
				a bag of crisps<<set $bird_food to "crisps">>
			<<case 5>>
				a large chocolate bar<<set $bird_food to "chocolate">>
			<<case 6>>
				an apple<<set $bird_food to "apple">>
			<<case 7>>
				a carrot<<set $bird_food to "carrot">>
			<<case 8>>
				a tin of baked beans<<set $bird_food to "beans">>
			<<case 9>>
				a tin of tuna<<set $bird_food to "tuna">>
			<<default>>
				a tin of custard<<set $bird_food to "custard">>
			<</switch>>
			in <<bhis>> <<if $monster is 1>>talons<<else>>mouth<</if>>.
			<<if $monster is 1>>
				"<<print either(
				"Saw wingless ones eating these.",
				"Maybe more your taste?",
				"Food for you.",
				"Don't understand landbound tastes, but for you...",
				"Wingless ones left their food unguarded. Poor move.",
				"Smelled from far away. Easy to take.",
				"Scavenged from landbound ones. No prey today."
				)>>"
			<</if>>
			<<bHe>> drops it at your feet, then looks at you, awaiting your response.
		<</if>>
		<br><br>

		<<if $bird_food is "milkshake">>
			<<link [[Drink|Bird Tower Food Milkshake]]>><<bird_loot food 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<lhunger>>
			<br>
		<<else>>
			<<link [[Eat|Bird Tower Food]]>><<bird_loot food 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<lhunger>>
			<br>
		<</if>>
		<<link [[Scold|Bird Tower Food Scold]]>><<bird_loot food -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<def 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>>
		<br>
		<<link [[Do nothing|Bird Tower Food Nothing]]>><<bird_loot food -10>><<npcincr "Great Hawk" love -1>><</link>><<llove>>
		<br>
	<<default>>
		<<bHe>> carries
		<<if $syndromebird is 1>><<select_random_clothes>><<else>><<select_random_clothes_limited "upper" "lower" "under_upper" "under_lower" "hands" "legs">><</if>>
		<<if setup.clothes[_random_slot][_random_index].plural isnot 1>>
			<<if setup.clothes[_random_slot][_random_index].word is "an">>
				an
			<<else>>
				a
			<</if>>
		<</if>>
		_random_clothes in <<bhis>> <<if $monster is 1>>talons<<else>>beak<</if>>.
		<<if $monster is 1>>
			"<<print either(
			"You looked cold.",
			"I don't understand how you wear these, but... here.",
			"This is how wingless attract mates, yes?",
			"Colours caught my eye from far.",
			"Your plumage is pleasing, I thought this would help.",
			"Landbound left this out of sight. Yelled at me as I flew off with it.",
			"I like how this feels. Do you?",
			"Hope this helps keep you warm when I'm away. These... do help you stay warm, right?"
			)>>"
		<</if>>
		<<bHe>> drops
		<<if setup.clothes[_random_slot][_random_index].plural isnot 1>>
			it
		<<else>>
			them
		<</if>>
		at your feet, then looks at you, awaiting your response.
		<br><br>

		<<if $bird.upgrades.wardrobe is 1>>
			<<if $worn[_random_slot].name isnot "naked" and _random_clothes isnot "piece of fabric">>
				<<link [[Wear|Bird Tower Clothes]]>><<generalWear _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
				<span class="blue">Your $worn[_random_slot].name will be put in your wardrobe.</span><<gfabric>>
			<<elseif _random_clothes isnot "piece of fabric">>
				<<link [[Wear|Bird Tower Clothes]]>><<generalWear _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<</if>>
			<<if _random_clothes isnot "piece of fabric">>
				<br>
				<<link [[Put it in the wardrobe|Bird Tower Clothes Keep]]>><<generalSend "wardrobe" _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<</if>>
		<<else>>
			<<if $worn[_random_slot].name isnot "naked" and _random_clothes isnot "piece of fabric">>
				<<link [[Wear|Bird Tower Clothes]]>><<generalRuined _random_slot>><<generalWear _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<set $bird.fabric += 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
				<span class="blue">Your $worn[_random_slot].name will be replaced.</span><<gfabric>>
			<<elseif _random_clothes isnot "piece of fabric">>
				<<link [[Wear|Bird Tower Clothes]]>><<generalWear _random_slot _random_index>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>>
			<</if>>
		<</if>>
		<br>
		<<link [[Thank|Bird Tower Fabric]]>><<bird_loot clothes 20>><<npcincr "Great Hawk" love 1>><<transform bird 1>><<set $bird.fabric += 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<glove>><<gfabric>>
		<br>
		<<link [[Scold|Bird Tower Clothes Scold]]>><<bird_loot clothes -20>><<npcincr "Great Hawk" dom -1>><<transform bird 1>><<def 1>><<set $bird.fabric += 1>><<bird_stockholm 1>><</link>><<gbirdstockholm>><<ldom>><<gfabric>>
		<br>
		<<link [[Do nothing|Bird Tower Clothes Nothing]]>><<bird_loot clothes -10>><<npcincr "Great Hawk" love -1>><<set $bird.fabric += 1>><</link>><<llove>><<gfabric>>
		<br>
	<</switch>>
<</widget>>

<<widget "bird_stockholm">>
	<<if _args[0] and $bird.syndrome isnot undefined>>
		<<set $bird.syndrome += _args[0]>>
	<</if>>
<</widget>>

<<widget "gbirdstockholm">>
	<<if $syndromebird isnot 1>>
		<<gstockholm>>
	<</if>>
<</widget>>

<<widget "bird_schedule">>
	<<if Time.hour gte 21 or Time.hour lte 5>>
		<<set $bird.activity to "sleep">>
	<<elseif Time.hour lte 9>>
		<<set $bird.activity to "sing">>
	<<elseif Time.hour lte 12>>
		<<set $bird.activity to "bathe">>
	<<elseif Time.hour lte 15>>
		<<set $bird.activity to "build">>
	<<elseif Time.hour lte 17>>
		<<set $bird.activity to "groom">>
	<<else>>
		<<set $bird.activity to "sing">>
	<</if>>
<</widget>>

<<widget "bird_greeting">>
	<<if $daily.birdGreeting isnot 1>>
		<<set $daily.birdGreeting to 1>>
		<<if $monster is 1>>
			<<if Time.hour lte 3 or Time.hour gte 18>>
				"Good evening,
			<<elseif Time.hour lte 12>>
				"Good morning,
			<<else>>
				"Good afternoon,
			<</if>>
			<<wife>>."
		<<else>>
			<<bHe>> greets you with a few low chirps.
		<</if>>
	<</if>>
<</widget>>

<<widget "hawkRescueSetup">>
	<<if $moor_hunt gte 1>>
		<<enable_rescue>>
	<<else>>
		<<set $_rescueChance to 5>>
		<<if $harpy gte 6>><<set $_rescueChance += 5>><</if>>
		<<if $syndromebird gte 1>><<set $_rescueChance += 10>><</if>>
		<<if $enemynomax gte 3>><<set $_rescueChance += 10>><</if>>
		<<if $enemytype is "man">><<set $_rescueChance += 5>><</if>>
		<<set $_rescueChance += Math.floor($moor / 5)>>
		<<if $_rescueChance gte random(1, 100)>><<enable_rescue>><</if>>
	<</if>>
	<<if $bird.hunts and $bird.hunts.injured gt 1>>
		<<set $_rescueChance to 0>>
	<</if>>
<</widget>>

<<widget "hawkScreechDesc">>
	<<if $syndromebird>>welcome<<elseif C.npc["Great Hawk"].init is 1>>familiar, terrifying<<else>>terrifying<</if>> screech
<</widget>>

<<widget "hawkRescueApproachSentence">>
	<<if $syndromebird is 1>>Salvation<<else>>Terror<</if>> <<print ["circles above", "approaches", "descends", "shadows you"][random($weather is "clear" ? 3 : 2)]>>.
<</widget>>

<<widget "hawkCaughtYouSpeech">>
	<<if $monster is 1>>
		<<if $birdescaped gte 1>>
			"<<Wife>> shouldn't <<if $birdescaped gte 2>>keep running<<else>>run<</if>> away," <<bhe>> says. "<<if $harpy gte 6>><<Wife>> doesn't know how to fly yet<<else>>Landbound travel is dangerous<</if>>."
		<<else>>
			"Caught you," <<bhe>> says as the wings on <<bhis>> back beat furiously.
		<</if>>
	<<else>>
		The <<beasttype>> lets out a
		<<if $birdescaped gte 1>>
			<<if understandsBirdBehaviour()>>relieved<<else>>soft<</if>>
		<<else>>
			<<if understandsBirdBehaviour()>>triumphant<<else>>sharp<</if>>
		<</if>>
		cry.
	<</if>>
<</widget>>

<<widget "bird_perch_options">>
	<<if $bird.state is "hunting" and $bird.timer lte 0>>
		<<endevent>>
		<<npc "Great Hawk">>
		You hear the flap of wings as the <<beasttype>> returns.

		<<bHe>> lands and <<if $monster is 1>>walks<<else>>hops<</if>> over to you.
		<<bird_hunt_return>>
	<<elseif $bird.state is "home" and $bird.activity isnot "sleep" and $bird.activity isnot "sing" and $bird.activity isnot "groom" and $bird.timer lte 0 and $bird.hunts.injured is 0>>
		<<endevent>>
		<<npc "Great Hawk">>
		<<if $monster is 1>>
			The <<beasttype>><<if $birdBask is 1>> gingerly helps you stand, and<</if>> steps to the edge of the perch.
			"<<print either(
				"I crave a hunt.",
				"The wild beckons me.",
				"My talons itch for prey.",
				"The winds call me.",
				"I must stretch my wings."
			)>> I will return with a gift."
		<<else>>
			The <<beasttype>> rises from <<bhis>> nest, looking out over the moor. <<bHis>> gaze is harsh. <<bHe>> seems to be looking to hunt.
		<</if>>
		<<unset $birdBask>>
		<br><br>

		<<if $syndromebird is 1>>
			<<if $harpy gte 6 and $bird.hunts.unlocked is true>>
				<<flight_time_check 30 "silent">>
				<<print '<<link [[Join the hunt ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Tower Hunt Ask]]>><</link>>'>><<print _fatigueText>>
				<br>
				<<link [[Stay|Bird Tower No Hunt]]>><</link>>
				<br>
			<<else>>
				<<link [[Ask to join the hunt|Bird Tower Hunt Ask]]>><</link>>
				<br>
				<<link [[Say nothing|Bird Tower No Hunt]]>><</link>>
				<br>
			<</if>>
		<<else>>
			<<bHe>> spreads <<bhis>> wings and launches from the tower.
			<br><br>
			<<set $bird.timer to random(30, 60)>>
			<<set $bird.state to "hunting">>
			<<unset $birdPerch>>
			<<link [[Next|Bird Tower Perch]]>><<endevent>><</link>>
			<br>
		<</if>>
	<<elseif $bird.activity is "sleep" and $birdSleep is undefined and $bird.state is "home">>
		<<set $birdSleep to 1>><<unset $birdPerch>><<unset $birdBask>>
		<<endevent>>
		<<npc "Great Hawk">>
		<<if $monster gte 1>>
			The <<beasttype>> scoops you in <<bhis>> arms. "Night has come," <<bhe>> says. "Let me take you to bed."
			<br><br>
		<<else>>
			The <<beasttype>> hops from the perch, towards the nest. <<bHe>> glances at you.
			<br><br>
		<</if>>

		<<link [[Nest|Bird Tower Perch Nest]]>><</link>>
		<br>
		<<link [[Stay up|Bird Tower]]>><<endevent>><</link>>
		<br>
	<<elseif $syndromebird is 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $birdBask is undefined and $bird.state is "home">>
		<<baskicon>><<link [[Bask (0:30)|Bird Tower Bask]]>><<bird_pass 30>><<stress -12>><<endevent>><</link>><<llstress>><br>
		<<mooricon "sing">><<link [[Sing (0:30)|Bird Tower Sing]]>><<transform bird 1>><<bird_pass 30>><<trauma -3>><<endevent>><</link>><<ltrauma>><br>
		<<if $syndromebird and $lurkers_held gte 1 and $bird.state is "home" and ["sing", "groom"].includes($bird.activity)>>
			<<ind>><<link "Give <<bhim>> the lurker" "Bird Tower Give Captured Lurker">><</link>> <<glove>>
			<br>
		<</if>>
		<<getouticon>><<link [[Go back inside|Bird Tower]]>><<unset $birdPerch>><<endevent>><</link>><br>
		<br>
		<<bird_fly_options>>
	<<elseif $birdBask is 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
		<<baskicon>><<link [[Continue to bask (0:30)|Bird Tower Bask]]>><<bird_pass 30>><<stress -12>><<endevent>><</link>><<llstress>><br>
		<<mooricon "sing">><<link [[Sing (0:30)|Bird Tower Sing]]>><<transform bird 1>><<bird_pass 30>><<trauma -3>><<endevent>><</link>><<ltrauma>><br>
		<<ind>><<link [[Get up|Bird Tower Perch]]>><<set $birdBask to 0>><<endevent>><</link>><br>
		<<getouticon>><<link [[Leave|Bird Tower Bask Leave]]>><<unset $birdBask>><<unset $birdPerch>><<endevent>><</link>><br>
	<<else>>
		<<if $birdSingIntro is 1>>
			<<mooricon "sing">><<link [[Sing (0:30)|Bird Tower Sing]]>><<set $birdSingAbsent to 1>><<bird_pass 30>><<trauma -3>><<endevent>><</link>><<ltrauma>><br>
		<</if>>
		<<getouticon>><<link [[Go back inside|Bird Tower]]>><<unset $birdPerch>><<endevent>><</link>><br>
		<br>
		<<bird_fly_options>>
	<</if>>
	<<unset $birdSingAbsent>>
<</widget>>

<<widget "bird_fly_options">>
	<<if $harpy gte 6>>
		The wind could carry you a long way<<if $birdFly isnot 1>>, <span class="red">but you don't know how to fly.</span> Your wings should at least carry you down safely<</if>>.
		<<if $syndromebird isnot 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
			<span class="red">However, you won't be getting far with the Great Hawk watching you.</span>
			<br><br>
		<<else>>
			<br>
			<<mooricon "tower">><<link [[Glide to the base of the tower (0:01)|Bird Tower Glide 2]]>><<unset $birdPerch>><<bird_pass 1>><<endevent>><</link>><<flight_text>><br>
		<</if>>
		<<if $birdFly isnot 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
			<<askicon>><<link [[Ask the Great Hawk to teach you to fly|Bird Tower Fly Intro]]>><</link>><<flight_text>><br>
		<<elseif $birdFly is 1>>
			<br>
			<<flight_time_check 60>>
			<<if $bird.hunts.unlocked is true and ($bird.hunts.lurkers is true or $bird.hunts.materials is true or $bird.hunts.valuables is true)>>
				<<ind>><<link [[Prepare for a hunt|Bird Hunt Start]]>><</link>><<flight_text>><br>
				<br>
			<</if>>
			<<if $exposed gte 2 and $exhibitionism lt 55>>
				<span class="red">You aren't lewd enough to fly exposed towards the town or farmlands.</span>
				<br>
			<<else>>
				<<farmicon>><<print '<<link [[Fly to the farmlands ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Tower Farmlands]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<unset $birdPerch>><<bird_pass _flightTime>><<endevent>><</link>>'>><<flight_text>><<print _fatigueText>><<if $exposed gte 2>><<exhibitionist4>><</if>>
				<br>
				<<entertownicon>><<print '<<link [[Fly to town ('+_hoursPassedLong+':'+ (_minutesPassedLong lt 10 ? "0" : "") + _minutesPassedLong + ')|Bird Tower Town]]>><<set $fatigueMod to (_fatigueMod + 1)>><<set $flightTime to _flightTimeLong>><<unset $birdPerch>><<bird_pass _flightTimeLong>><<endevent>><</link>>'>><<flight_text>><<print _fatigueText>><<if $exposed gte 2>><<exhibitionist4>><</if>>
				<br>
			<</if>>
			<<foresticon>><<print '<<link [[Fly to the forest ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Tower Forest]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<unset $birdPerch>><<bird_pass 30>><<endevent>><</link>>'>><<flight_text>><<print _fatigueText>>
			<br>
		<</if>>
	<<elseif $angel gte 6 or $demon gte 6 or $fallenangel gte 2>>
		<<if $pain gte 20>>
			Your wings should carry you down, <span class="purple">but you're too injured for such a risky jump right now.</span>
			<br><br>
		<<else>>
			Your wings should carry you down.
			<<if $syndromebird isnot 1 and ($bird.activity is "sing" or $bird.activity is "groom") and $bird.state is "home">>
				<span class="red">However, you won't be getting far with the Great Hawk watching you.</span>
				<br><br>
			<<elseif $birdFly is 1 or $birdGlide is 1>>
				<br><br>
				<<glideicon>><<link [[Glide down (0:02)|Bird Tower Glide]]>><<unset $birdPerch>><<bird_pass 2>><<endevent>><</link>><<flight_text>>
			<<elseif currentSkillValue('willpower') lt 250>>
				<span class="red">But you don't have the will or courage to attempt it.</span>
			<<elseif $daily.glideScared>>
				<span class="red">You're too scared to try again right now.</span>
			<<else>>
				<br><br>
				<<glideicon>><<link [[Attempt to glide down (0:02)|Bird Tower Glide Attempt]]>><<unset $birdPerch>><<bird_pass 2>><<endevent>><</link>><<flight_text>><<willpowerdifficulty 250 1100>>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "flight_time_check">>
	<<if _args[0]>>
		<<set _flightTimeBase to _args[0]>>
	<<else>>
		<<set _flightTimeBase to 60>>
	<</if>>
	<<if $bird.hunts and $bird.hunts.weight>>
		<<set _flightTimeBase += $bird.hunts.weight>>
	<</if>>
	<<set _flightTime to _flightTimeBase>>
	<<switch $weather>>
		<<case "overcast">>
			<<set _flightTime -= Math.floor(_flightTimeBase / 3)>>
			<<set _fatigueText to "<<gtiredness>>">>
			<<set _fatigueMod to 0.5>>
			<<if _args[1] isnot "silent">><span class="gold">The strong winds will make flight easy and fast.</span><</if>>
		<<case "rain">>
			<<set _flightTime += 1>>
			<<for _active_clothes range Object.keys($worn)>>
				<<if !$worn[_active_clothes].type.includes("naked") and !$worn[_active_clothes].type.includes("swim")>>
					<<switch _active_clothes>>
						<<case "over_upper" "over_lower">>
							<<set _flightTime += Math.floor(_flightTimeBase / 6)>>
						<<case "upper" "lower">>
							<<set _flightTime += Math.floor(_flightTimeBase / 9)>>
						<<case "under_upper" "under_lower" "feet">>
							<<set _flightTime += Math.floor(_flightTimeBase / 18)>>
						<<default>>
					<</switch>>
					<<set _slowText to true>>
				<</if>>
			<</for>>
			<<if _slowText>>
				<<if _flightTime gte Math.floor(_flightTimeBase + (_flightTimeBase * 0.5))>>
					<<set _fatigueText to "<<gggtiredness>>">>
					<<set _fatigueMod to 3>>
					<<if _args[1] isnot "silent">><span class="red">Flying in the rain will soak your clothes, heavily slowing you down and exposing you.</span><</if>>
				<<elseif _flightTime gte Math.floor(_flightTimeBase + (_flightTimeBase * 0.25))>>
					<<set _fatigueText to "<<gggtiredness>>">>
					<<set _fatigueMod to 3>>
					<<if _args[1] isnot "silent">><span class="pink">Flying in the rain will soak your clothes, slowing you down and exposing you.</span><</if>>
				<<elseif _flightTime gt _flightTimeBase>>
					<<set _fatigueText to "<<ggtiredness>>">>
					<<set _fatigueMod to 2>>
					<<if _args[1] isnot "silent">><span class="blue">Flying in the rain will soak your clothes, slightly slowing you down and exposing you.</span><</if>>
				<<else>>
					<<set _fatigueText to "<<gtiredness>>">>
					<<set _fatigueMod to 2>>
					<<if _args[1] isnot "silent">><span class="green">Flying in the rain won't slow you down at all in your current state of dress.</span><</if>>
				<</if>>
			<<else>>
				<<set _fatigueText to "<<gtiredness>>">>
				<<set _fatigueMod to 2>>
				<<if _args[1] isnot "silent">><span class="green">Flying in the rain won't slow you down at all in your current state of dress.</span><</if>>
			<</if>>
		<<case "snow">>
			<<set _flightTime += Math.floor(_flightTimeBase / 6)>>
			<<set _fatigueText to "<<ggtiredness>>">>
			<<set _fatigueMod to 2>>
			<<if _args[1] isnot "silent">><span class="blue">Flying in the snow will obscure your vision and slow you down.</span><</if>>
		<<default>>
			<<set _fatigueText to "<<gtiredness>>">>
			<<set _fatigueMod to 1>>
			<<if _args[1] isnot "silent">><span class="green">The weather shouldn't affect your flight.</span><</if>>
	<</switch>>
	<<if _args[1] isnot "silent">><br><</if>>
	<<if currentSkillValue('athletics') gt 0>>
		<<set _flightTime -= Math.floor((_flightTime / 20) * (currentSkillValue('athletics') / 100))>>
	<</if>>
	<<if _flightTime lte 0>>
		<<set _flightTime to 1>>
	<</if>>
	<<set _hoursPassed to Math.floor(_flightTime / 60)>>
	<<set _minutesPassed to _flightTime % 60>>

	<<set _flightTimeLong to Math.floor(_flightTime + 15)>>
	<<set _hoursPassedLong to Math.floor(_flightTimeLong / 60)>>
	<<set _minutesPassedLong to _flightTimeLong % 60>>

	<<set _flightTimeSearch to Math.floor(_flightTime + 3)>>
	<<set _hoursPassedSearch to Math.floor(_flightTimeSearch / 60)>>
	<<set _minutesPassedSearch to _flightTimeSearch % 60>>
<</widget>>

<<widget "flight_effects">>
	<<if $weather is "rain">>
		<<if !$worn.upper.type.includes("swim") and !$worn.upper.type.includes("naked")>>
			<<set $upperwet += Math.floor($flightTime * 4)>>
		<</if>>
		<<if !$worn.lower.type.includes("swim") and !$worn.lower.type.includes("naked")>>
			<<set $lowerwet += Math.floor($flightTime * 4)>>
		<</if>>
		<<if !$worn.under_lower.type.includes("swim") and !$worn.under_lower.type.includes("naked")>>
			<<set $underlowerwet += Math.floor($flightTime * 4)>>
		<</if>>
		<<if !$worn.under_upper.type.includes("swim") and !$worn.under_upper.type.includes("naked")>>
			<<set $underupperwet += Math.floor($flightTime * 4)>>
		<</if>>
	<</if>>
	<<set _tempTired to (Math.floor($flightTime / 4) + 1)>>
	<<tiredness _tempTired>>
	<<unset $flightTime>>
	<<unset $fatigueMod>>
<</widget>>

<<widget "flight_distance_check">>
	<<set _distanceNorth to Math.abs($bird.hunts.distanceNorth)>>
	<<set _distanceEast to Math.abs($bird.hunts.distanceEast)>>
	<<set _distanceTotal to (_distanceNorth + _distanceEast)>>
	<<set _returnTime to (5 * _distanceTotal)>>
<</widget>>

<<widget "flight_hunt_options">>
	<<flight_time_check 20 "silent">>
	<<if $bird.hunts.goal is "hawk">>
		<<set _directionPool to []>>
		<<if $bird.hunts.distanceNorth lt 5 and !($bird.hunts.distanceNorth is -1 and _distanceEast is 0)>>
			<<run _directionPool.pushUnique("north")>>
		<</if>>
		<<if $bird.hunts.distanceEast lt 5 and !($bird.hunts.distanceEast is -1 and _distanceNorth is 0)>>
			<<run _directionPool.pushUnique("east")>>
		<</if>>
		<<if $bird.hunts.distanceNorth gt -5 and !($bird.hunts.distanceNorth is 1 and _distanceEast is 0)>>
			<<run _directionPool.pushUnique("south")>>
		<</if>>
		<<if $bird.hunts.distanceEast gt -5 and !($bird.hunts.distanceEast is 1 and _distanceNorth is 0)>>
			<<run _directionPool.pushUnique("west")>>
		<</if>>
		<<set $bird.hunts.direction to _directionPool.pluck()>>
		<<switch $bird.hunts.direction>>
			<<case "north">><<set _distanceNorth to 1>><<set _distanceEast to 0>>
			<<case "east">><<set _distanceNorth to 0>><<set _distanceEast to 1>>
			<<case "south">><<set _distanceNorth to -1>><<set _distanceEast to 0>>
			<<case "west">><<set _distanceNorth to 0>><<set _distanceEast to -1>>
		<</switch>>
		<<capture _distanceNorth _distanceEast _hoursPassed _minutesPassed _fatigueMod _flightTime _fatigueText>>
			<<print `<<link [[Continue hunting ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.distanceNorth += _distanceNorth>><<set $bird.hunts.distanceEast += _distanceEast>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>`>><<print _fatigueText>>
			<br>
		<</capture>>
		<br>
		<<link [[Ask to hunt for something else|Bird Hunt Goal]]>><<endevent>><<set $phase to 1>><</link>>
		<br>
		<<flight_time_check _returnTime "silent">>
		<<print '<<link [[Ask to return to the castle ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Return Ask]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
		<br>
	<<else>>
		<<if _distanceNorth gte 4 or _distanceEast gte 4>>
			You can't see the tower from here.
		<<elseif _distanceNorth is 0 and _distanceEast is 0>>
			The moor stretches out before you.
		<<else>>
			The tower is to the
			<<if $bird.hunts.distanceNorth lte -1>>north<<elseif $bird.hunts.distanceNorth gte 1>>south<</if>><<if $bird.hunts.distanceEast lte -1>>west<<elseif $bird.hunts.distanceEast gte 1>>east<</if>>.
		<</if>>
		<br>
		<<if $bird.hunts.distanceNorth lte -1 and $bird.hunts.distanceNorth gte -3 and $bird.hunts.distanceEast lte 5 and $bird.hunts.distanceEast gte 3>>
			<!--
			There's a tall stone overlooking a small path to the
			<<if $bird.hunts.distanceNorth lt -2>>north<<elseif $bird.hunts.distanceNorth gt -2>>south<</if>><<if $bird.hunts.distanceEast lt 4>>east<<elseif $bird.hunts.distanceNorth gt 4>>west<</if>>.
			<br>
			-->
		<</if>>
		<<if between($bird.hunts.distanceNorth, ($daily.huntRemyCampNorth - 1), ($daily.huntRemyCampNorth + 1)) and between($bird.hunts.distanceEast, ($daily.huntRemyCampEast - 1), ($daily.huntRemyCampEast + 1))>>
			<<if !($bird.hunts.distanceNorth is $daily.huntRemyCampNorth and $bird.hunts.distanceEast is $daily.huntRemyCampEast)>>
				There's smoke rising to the
				<<if $bird.hunts.distanceNorth lt $daily.huntRemyCampNorth>>north<<elseif $bird.hunts.distanceNorth gt $daily.huntRemyCampNorth>>south<</if>><<if $bird.hunts.distanceEast lt $daily.huntRemyCampEast>>east<<elseif $bird.hunts.distanceNorth gt $daily.huntRemyCampEast>>west<</if>>.
				<br>
			<</if>>
		<</if>>
		<<if $bird.hunts.distanceNorth is 5>>
			The farmlands stretch to the north, marking the end of your territory.
		<<elseif $bird.hunts.distanceEast is 5>>
			Going any further east would put you in unfamiliar, dangerous territory.
		<<elseif distanceNorth is -5>>
			You feel your sense of direction failing the further south you travel. It would be wise to turn around.
		<<elseif distanceEast is -5>>
			<<if $bogProgress gte 1>>
				The bog stretches to the west, and the forest beyond that.
			<<else>>
				The forest stretches to the west.
			<</if>>
		<</if>>
		<br>
		Which direction will you fly?
		<br>
		<<capture _hoursPassed _minutesPassed _fatigueMod _flightTime _fatigueText>>
			<<if $bird.hunts.distanceNorth lt 5>>
				<<print '<<link [[North ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "north">><<set $bird.hunts.distanceNorth++>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
			<<if $bird.hunts.distanceEast lt 5>>
				<<print '<<link [[East ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "east">><<set $bird.hunts.distanceEast++>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
			<<if $bird.hunts.distanceNorth gt -5>>
				<<print '<<link [[South ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "south">><<set $bird.hunts.distanceNorth-->><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
			<<if $bird.hunts.distanceEast gt -5>>
				<<print '<<link [[West ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Event]]>><<set $bird.hunts.direction to "west">><<set $bird.hunts.distanceEast-->><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><</link>>'>><<print _fatigueText>>
				<br>
			<</if>>
		<</capture>>
		<br>
	
		<<link [[Hunt for something else|Bird Hunt Goal]]>><<endevent>><<set $phase to 1>><</link>>
		<br>
		<<flight_time_check _returnTime "silent">>
		<<print '<<link [[Return to the castle ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Return]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><<endevent>><<set $phase to 1>><</link>>'>><<print _fatigueText>>
		<br>
	<</if>>
<</widget>>

<<widget "flight_hunt_return">>
	<<if ($bird.hunts.weight gte 3 and $bird.hunts.duo is false) or $bird.hunts.weight gte 5>>
		You won't be able to carry any more. You begin to fly back to the tower.
		<br><br>

		<<flight_distance_check>>
		<<flight_time_check _returnTime "silent">>
		<<print '<<link [[Return to the castle ('+_hoursPassed+':'+ (_minutesPassed lt 10 ? "0" : "") + _minutesPassed + ')|Bird Hunt Return]]>><<set $fatigueMod to _fatigueMod>><<set $flightTime to _flightTime>><<bird_pass _flightTime>><<endevent>><</link>>'>><<print _fatigueText>>
		<br>
	<<else>>
		You return to the higher skies.
		<br><br>

		<<endevent>>
		<<if _huntFail is 1>><<set $phase to 2>><</if>>
		<<flight_hunt_options>>
	<</if>>
<</widget>>

<<widget "flight_hunt_chance">>
	<<if $bird.hunts.goal is "hawk">>
		<<bird_loot_select>>
		<<switch _bird_loot_select>>
			<<case "food" "lurker">><<set $_goal to "lurkers">>
			<<case "trash" "clothes">><<set $_goal to "materials">>
			<<case "valuables">><<set $_goal to "valuables">>
		<</switch>>
	<<else>>
		<<set $_goal to $bird.hunts.goal>>
	<</if>>
	<<set _flight_hunt_chance to {
		nothing: 1,
		lurkers: random(0.5, 1.5),
		materials: random(0.5, 1),
		valuables: random(0, 1),
		other: 0.5
	}>>
	<<set _flight_hunt_chance[$_goal] += ($bird.hunts.goal is "hawk" ? 3 : 1 + (currentSkillValue("skulduggery") / 500).toFixed(2))>>
	<<if $weather is "rain" or $weather is "snow">>
		<<set _flight_hunt_chance.nothing++>>
	<</if>>
	<<if Time.dayState is "night">>
		<<set _flight_hunt_chance.nothing++>>
	<</if>>
	<<if $bird.hunts.goal is "hawk">>
		<<set _flight_hunt_chance.nothing to 0>>
	<</if>>
	<<if $daily.huntRemyCampNorth is undefined>>
		<<set $daily.huntRemyCampNorth to random(2,5)>>
		<<set $daily.huntRemyCampEast to random(-5,5)>>
	<</if>>
<</widget>>

<<widget "flight_hunt_get">>
	<<if !_args[0]>>
		<<run Errors.report("No argument specified for widget flight_hunt_get")>>
	<<elseif typeof _args[0] isnot "string">>
		<<run Errors.report("Non-string provided as first argument for widget flight_hunt_get")>>
	<<elseif !_args[1] or typeof !_args[1] isnot "number">>
		<<run Errors.report("No number argument specified for widget flight_hunt_get")>>
	<<else>>
		<<set $_looted to _args[0]>><<set $_amount to _args[1]>>
		<<if $_looted is "clothing" or $_looted is "valuables">>
			<<if _args[2]>>
				<<set $_info to _args[2]>>
				<<if $bird.hunts.loot[$_looted] is undefined>>
					<<run $bird.hunts.loot.pushUnique($_looted : {$_info: 0})>>
				<</if>>
				<<if $bird.hunts.loot[$_looted][$_info] is undefined>>
					<<set $bird.hunts.loot[$_looted].pushUnique($_info : 0)>>
				<</if>>
				<<set $bird.hunts.loot[$_looted][$_info] += $_amount>>
				<<set $bird.hunts.lootAmount += $_amount>>
			<<else>>
				<<run Errors.report("Invalid special loot of type; " + $_looted + " " + _args[2])>>
			<</if>>
		<<elseif $bird.materials[$_looted] is undefined>>
			<<run Errors.report("Invalid loot of type; " + $_looted)>>
		<<else>>
			<<if $bird.hunts.loot[$_looted] is undefined>>
				<<run $bird.hunts.loot.pushUnique($_looted : 0)>>	
			<</if>>
			<<set $bird.hunts.loot[$_looted] += $_amount>>
			<<set $bird.hunts.lootAmount += $_amount>>
		<</if>>
		<<switch $_looted>>
			<<case "tarp">><<set $bird.hunts.weight += 5>>
			<<case "toolbox" "pot">><<set $bird.hunts.weight += 2>>
			<<case "wood">><<set $bird.hunts.weight += (3 * $_amount)>>
			<<case "sticks">><<set $bird.hunts.weight += (1.5 * $_amount)>>
			<<case "leaves">><<set $bird.hunts.weight += (0.5 * $_amount)>>
			<<case "valuables" "junk">><<set $bird.hunts.weight += (0.2 * $_amount)>>
			<<default>><<set $bird.hunts.weight += $_amount>>
		<</switch>>
	<</if>>
<</widget>>

<<widget "flight_hunt_loot">>
	<<set $_hordeLoot to 0>><<set $_otherLoot to 0>>
	You looted:
	<br>
	<<for $_lootType range Object.keys($bird.hunts.loot)>>
		<<set $_tempNum to $bird.hunts.loot[$_lootType]>>
		<span class="green">- <<number $_tempNum>></span>
		<<switch $_lootType>>
			<<case "toolbox">>
				<<set $_otherLoot++>><<set $bird.upgrades.tools to 1>>
				box of tools. You place it somewhere safe.
			<<case "pot">>
				<<set $_otherLoot++>><<set $bird.upgrades.pot to 1>>
				cooking pot. You place it near the rainwater pool.
			<<case "telescope">>
				<<set $_otherLoot++>><<set $bird.upgrades.telescope to 1>>
				ornate telescope. You set it up near the precipice.		
			<<case "wood">>
				<<set $_matLoot += $_tempNum>><<set $bird.materials.wood += 1>>
				piece<<if $_tempNum gte 2>>s<</if>> of wood.
			<<case "fabric">>
				<<set $_matLoot += $_tempNum>><<set $bird.materials.fabric += 1>>
				scrap<<if $_tempNum gte 2>>s<</if>> of fabric.
			<<case "sticks">>
				<<set $_matLoot += $_tempNum>><<set $bird.materials.sticks += 1>>
				stick<<if $_tempNum gte 2>>s<</if>>.
			<<case "leaves">>
				<<set $_matLoot += $_tempNum>><<set $bird.materials.leaves += 1>>
				large <<if $_tempNum gte 2>>leaves<<else>>leaf<</if>>.
			<<case "junk">>
				<<set $_hordeLoot += $_tempNum>><<set $bird.materials.junk += 1>>
				piece<<if $_tempNum gte 2>>s<</if>> of shiny junk.
			<<case "lurkers">>
				<<set $_lurkerLoot += $_tempNum>><<set $bird.materials.lurkers += 1>>
				lurker<<if $_tempNum gte 2>>s<</if>>.
			<<case "leather">>
				<<set $_matLoot += $_tempNum>><<set $bird.materials.leather += 1>>
				piece<<if $_tempNum gte 2>>s<</if>> of treated leather.
			<<case "tarp">>
				<<set $_hordeLoot++>><<set $bird.upgrades.tarp to 1>>
				large tarp.
			<<case "clothing">>
				<<set $_matLoot += $_tempNum>>
				piece<<if $_tempNum gte 2>>s<</if>> of clothing.
			<<case "valuables">>
				<<set $_hordeLoot += $_tempNum>>
				valuable item<<if $_tempNum gte 2>>s<</if>>:
				<<for $_lootValType range Object.keys($bird.hunts.loot.valuables)>>
					<<set $_tempNumVal to $bird.hunts.loot.valuabes[$_lootValType]>>
					<<if $bird.materials.valuabes[$_lootValType] is undefined>>
						<<run $bird.materials.valuables.pushUnique($_lootValType : 0)>>
					<</if>>
					<<set $bird.materials.valuabes[$_lootValType] += $_tempNumVal>>
					<br>
					<<ind>><span class="teal">- <<number $_tempNumVal>></span> $_lootValType<<if $_tempNumVal gte 2>>s<</if>>.
				<</for>>
			<<default>>
		<</switch>>
		<br>
	<</for>>
	<<if $_hordeLoot gte 1 and $_matLoot gte 1 and $_otherLoot gte 1>>
		You sort everything into neat piles.
	<<elseif $_matLoot gte 2>>
		You add the fresh materials to the pile.
	<<elseif $_hordeLoot gte 2>>
		You pile up your valuables into your horde.
	<<elseif $_hordeLoot + $_matLoot + $_otherLoot gte 1>>
		You add them to the pile.
	<<elseif $_hordeLoot + $_matLoot + $_otherLoot is 1>>
		You add it to the pile.
	<</if>>
	<br><br>

	<<if $_lurkerLoot gte 1>>
		<<if $bird.hunts.duo is true and $_lurkerLoot gte 2>>
			Your spouse quickly devours one of the lurkers. <<set $bird.materials.lurkers -=1>>
			<br><br>
		<</if>>
		<<if $bird.hunts.injured gt 1>>
			<<link [[Feed the Great Hawk a lurker|Bird Tower Hunt End Injured Eat]]>><<set $bird.materials.lurkers -=1>><<set $bird.hunts.injured-->><<endevent>><</link>>
			<br>
		<<else>>
			<<link [[Eat a lurker|Bird Tower Hunt End Eat]]>><<hunger -2000>><<set $bird.materials.lurkers -=1>><<endevent>><</link>>
			<br>
		<</if>>
	<</if>>
	<<link [[Continue|Bird Tower]]>><<endevent>><</link>>
	<br>
	<<flight_hunt_end>>
<</widget>>

<<widget "towerValuables">>
	<span id="towerVal">
		<<for $_valuables range Object.keys($bird.materials.valuables)>>
			<<if $bird.materials.valuables[$_valuables] gte 1>>
				<<set $_valuablessMessage to true>>
				<<number $bird.materials.valuables[$_valuables]>> $_valuables<<if $bird.materials.valuables[$_valuables] gte 2>><<if $_valuables is "watch">>es<<else>>s<</if>><</if>>
				<<capture $_valuables>>
					<<link "Take one">>
					<<if $_valuables is "antique bullet">><<set $antiquemoney += 50>><<museumAntiqueStatus "antiquebullet" "found">><<else>><<set $blackmoney += 50>><</if>>
					<<set $bird.materials.valuables[$_valuables] -= 1>>
					<<replace "#towerVal">><<towerValuabes>><</replace>>
					<</link>> |
					<<link "Take all">>
					<<if $_valuables is "antique bullet">><<set $antiquemoney += (50 * $bird.materials.valuables[$_valuables])>><<museumAntiqueStatus "antiquebullet" "found">><<else>><<set $blackmoney += (50 * $bird.materials.valuables[$_valuables])>><</if>>
					<<set $bird.materials.valuables[$_valuables] to 0>>
					<<replace "#towerVal">><<towerValuabes>><</replace>>
					<</link>>
					<br>
				<</capture>>	
			<</if>>
		<</for>>
	</span>
<</widget>>

<<widget "flight_hunt_end">>
	<<run delete $bird.hunts.duo>>
	<<run delete $bird.hunts.goal>>
	<<run delete $bird.hunts.weight>>
	<<run delete $bird.hunts.direction>>
	<<run delete $bird.hunts.distanceNorth>>
	<<run delete $bird.hunts.distanceEast>>
	<<run delete $bird.hunts.ignored>>
	<<run delete $bird.hunts.loot>>
	<<run delete $bird.hunts.lootAmount>>
<</widget>>

<<widget "towerBuildOption">>
	<div>
		<<if _towerUpgrades is undefined>><<set _towerUpgrades to {}>><</if>>
		<<set _upgrade to _args[0]>>
		<<set _towerUpgrades[_upgrade] to {}>>
		<<switch _upgrade>>
			<<case "shelter">>
				<<set $_build to true>>
				<<switch $bird.upgrades.shelter>>
					<<case 0>>
						<span class="red">Poor shelter (0)</span>: Rain will leak through.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Shelter 1">>
						<<set _towerUpgrades[_upgrade].timeTaken to 15>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							fabric: 1,
							leaves: 5
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 0>>
					<<case 1>>
						<span class="purple">Makeshift shelter (1)</span>: Protection from rain, but will fall apart.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Shelter 2">>
						<<set _towerUpgrades[_upgrade].timeTaken to 90>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 2,
							sticks: 2,
							leaves: 5,
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1,
							tarp: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 100>>
					<<case 2>>
						<span class="teal">Tarp shelter (2)</span>: Protection from rain.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Shelter 3">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 4,
							fabric: 2,
							sticks: 10,
							leather: 2
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1,
							tarp: 1
						}>>
						<<set _towerUpgrades[_upgrade].gradeRequired to {
							science: 2
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 200>>
					<<case 3>>
						<<unset $_build>>
						<span class="green">Advanced Tarp shelter (3)</span>: Ventilated to allow smoke to escape while still keeping rain out.
				<</switch>>
			<<case "nest">>
				<<set $_build to true>>
				<<switch $bird.upgrades.nest>>
					<<case 0>>
						<span class="red">Wood nest (0)</span>: Poor sleep quality. Uncomfortable.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Nest 1">>
						<<set _towerUpgrades[_upgrade].timeTaken to 30>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							fabric: 2,
							leaves: 2
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 100>>
					<<case 1>>
						<span class="purple">Padded nest (1)</span>: Improves sleep quality a little bit. No splinters.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Nest 2">>
						<<set _towerUpgrades[_upgrade].timeTaken to 90>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 2,
							fabric: 6,
							sticks: 2,
							leaves: 6,
						}>>
						<<set _towerUpgrades[_upgrade].activityRequired to "build">>
						<<set _towerUpgrades[_upgrade].housekeeping to 300>>
					<<case 2>>
						<span class="teal">Cushioned nest (2)</span>: Improves sleep quality. Comfy.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Nest 3">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							fabric: 10,
							leaves: 10,
							junk: 4,
							leather: 4
						}>>
						<<set _towerUpgrades[_upgrade].activityRequired to "build">>
						<<set _towerUpgrades[_upgrade].housekeeping to 500>>
					<<case 3>>
						<<unset $_build>>
						<span class="green">Luxurious nest (3)</span>: Improves sleep quality a lot. Pleasing to look at.
				<</switch>>
			<<case "firepit">>
				<<set $_build to true>>
				<<switch $bird.upgrades.firepit>>
					<<case 0>>
						<span class="red">No firepit (0)</span>: Dark and cold nights.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Firepit 1">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 2,
							sticks: 2
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 0>>
					<<case 1>>
						<span class="purple">Makeshift firepit (1)</span>: Will keep you warm, but burns out quickly. Doesn't produce enough smoke to be of concern. Anything larger will require proper ventilation.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Firepit 2">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 6,
							sticks: 10,
							junk: 2
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1,
							shelter: 3
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 0>>
					<<case 2>>
						<span class="teal">Robust firepit (2)</span>: Burns longer. Speeds up Lurker drying.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Firepit 3">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 8,
							sticks: 12,
							junk: 4,
							leather: 2
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1,
							shelter: 3
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 0>>
					<<case 3>>
						<<unset $_build>>
						<span class="green">Bonfire (3)</span>: Burns for a long time. Cooks and dries lurkers very quickly. Cozy.
				<</switch>>
			<<case "pot">>
				<!-- This is set up as intended, I know it looks weird but the upgrade value gets set to 1 when the player finds the cooking pot -->
				<<set $_build to true>>
				<<switch $bird.upgrades.pot>>
					<<case 0>>
						<span class="red">No cooking pot (0)</span>: Can not cook.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Cooking">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 3,
							fabric: 3,
							sticks: 3
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							pot: 1,
							firepit: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 0>>
					<<case 1>>
						<span class="purple">Unmounted cooking pot (1)</span>: Will need a mount above a firepit before it can be used.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Cooking">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 3,
							fabric: 3,
							sticks: 3
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							pot: 1,
							firepit: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 100>>	
					<<case 2>>
						<span class="teal">Cooking pot (2)</span>: Can cook lurkers. With some ingenuity, you could use it to heat the rainwater bath.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Heating">>
						<<set _towerUpgrades[_upgrade].timeTaken to 180>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 6,
							fabric: 8,
							sticks: 6,
							junk: 4,
							leather: 8
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1,
							firepit: 3
						}>>
						<<set _towerUpgrades[_upgrade].gradeRequired to {
							science: 4
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 300>>
					<<case 3>>
						<<unset $_build>>
						<span class="green">Cooking pot and heating element (3)</span>: Can cook lurkers. Feeding extra wood will heat the rainwater bath to a comfortably warm temperature.
				<</switch>>
			<<case "rack">>
				<<set $_build to true>>
				<<switch $bird.upgrades.rack>>
					<<case 0>>
						<span class="red">No drying rack (0)</span>: Can not dry out lurkers.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Rack 1">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 3,
							fabric: 3,
							sticks: 3
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 0>>
					<<case 1>>
						<span class="purple">Makeshift drying rack (1)</span>: Can dry out lurkers to harvest them for leather. A fire will speed up the process significantly.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Rack 2">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 4,
							fabric: 4,
							sticks: 4,
							junk: 2
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 200>>
					<<case 2>>
						<span class="teal">Expanded drying rack (2)</span>: Can dry out more lurkers at a time.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Rack 3">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 8,
							sticks: 12,
							leaves: 4,
							junk: 4,
							leather: 4
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1,
							shelter: 3
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 600>>
					<<case 3>>
						<<unset $_build>>
						<span class="green">Enclosed drying rack (3)</span>: Can dry out many lurkers at once. No harmful fumes will escape.
				<</switch>>
			<<case "snare">>
				<<set $_build to true>>
				<<switch $bird.upgrades.snare>>
					<<case 0>>
						<span class="red">No snare (0)</span>: Build a snare to catch lurkers at the bottom of the tower.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Snare 1">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 2,
							fabric: 2,
							sticks: 1,
							leaves: 2,
							junk: 1,
							leather: 4
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 300>>
					<<case 1>>
						<span class="purple">Makeshift snare (1)</span>: Will sometimes catch a lurker at the bottom of the tower.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Snare 2">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 4,
							sticks: 6,
							leaves: 2,
							junk: 1,
							leather: 10
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 400>>
					<<case 2>>
						<span class="teal">Robust snare (2)</span>: Will regularly catch a lurker at the bottom of the tower.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Snare 3">>
						<<set _towerUpgrades[_upgrade].timeTaken to 240>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 6,
							sticks: 10,
							junk: 1,
							leather: 16
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 600>>
					<<case 3>>
						<<unset $_build>>
						<span class="green">Advanced Snare (3)</span>: Will often catch lurkers at the bottom of the tower. The Great Hawk will collect them automatically for you.
				<</switch>>
			<<case "decor">>
				<<set $_build to true>>
				<<switch $bird.upgrades.decor>>
					<<case 0>>
						<span class="red">No hunting trophies (0)</span>: No stress reduction after hunting.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Decor 1">>
						<<set _towerUpgrades[_upgrade].timeTaken to 120>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 2,
							fabric: 2,
							sticks: 2,
							leaves: 2,
							junk: 4,
							lurkers: 2
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 200>>
					<<case 1>>
						<span class="purple">Simple hunting trophies (1)</span>: Reduces a little stress each time you return from a successful hunt.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Decor 2">>
						<<set _towerUpgrades[_upgrade].timeTaken to 240>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 3,
							fabric: 3,
							sticks: 3,
							leaves: 3,
							junk: 6,
							lurkers: 6
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 400>>
					<<case 2>>
						<span class="teal">Pleasing hunting trophies (2)</span>: Reduces stress after each successful hunt.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Decor 3">>
						<<set _towerUpgrades[_upgrade].timeTaken to 240>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 4,
							fabric: 4,
							sticks: 4,
							leaves: 4,
							junk: 10,
							lurkers: 8
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							mirror: 1,
							tools: 1,
							shelter: 2,
							nest: 2
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 600>>
					<<case 3>>
						<span class="green">Impressive hunting trophies (3)</span>: Large stress reduction after each successful hunt.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Decor 4">>
						<<set _towerUpgrades[_upgrade].timeTaken to 240>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							fabric: 10,
							junk: 40,
							lurkers: 30
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							mirror: 1,
							tools: 1,
							tarp: 1,
							telescope: 1,
							shelter: 3,
							nest: 3,
							wardrobe: 1
						}>>
						<<set _towerUpgrades[_upgrade].activityRequired to "build">>
						<<set _towerUpgrades[_upgrade].housekeeping to 800>>
					<<case 4>>
						<<unset $_build>>
						<span class="gold">Legendary hunting trophies (4)</span>: Stress is entirely removed after a successful hunt, and some trauma is reduced. Terror has found its equal.
				<</switch>>
			<<case "wardrobe">>
				<<set $_build to true>>
				<<switch $bird.upgrades.wardrobe>>
					<<case 0>>
						<span class="red">No wardrobe</span>: No clothing storage possible.
						<<set _towerUpgrades[_upgrade].passage to "Bird Tower Build Wardrobe">>
						<<set _towerUpgrades[_upgrade].timeTaken to 60>>
						<<set _towerUpgrades[_upgrade].materialsUsed to {
							wood: 20,
							fabric: 8,
							sticks: 10,
							leaves: 10,
							junk: 6,
							lurkers: 4,
							leather: 4
						}>>
						<<set _towerUpgrades[_upgrade].upgradesRequired to {
							tools: 1
						}>>
						<<set _towerUpgrades[_upgrade].housekeeping to 900>>
					<<case 1>>
						<<unset $_build>>
						<span class="green">Wardrobe</span>: Access to clothing.
				<</switch>>
			<<default>>
				<span class="red">Invalid option for: _upgrade</span>
		<</switch>>
		<<if $_build and _towerUpgrades[_upgrade].passage>>
			<<if currentSkillValue('housekeeping') lt _towerUpgrades[_upgrade].housekeeping>>
				<br>
				<span class="black">
					<<switch _towerUpgrades[_upgrade].housekeeping>>
						<<case 100>><span class="pink">F+</span>
						<<case 200>><span class="purple">D</span>
						<<case 300>><span class="purple">D+</span>
						<<case 400>><span class="blue">C</span>
						<<case 500>><span class="blue">C+</span>
						<<case 600>><span class="lblue">B</span>
						<<case 700>><span class="lblue">B+</span>
						<<case 800>><span class="teal">A</span>
						<<case 900>><span class="teal">A+</span>
						<<case 1000>><span class="green">S</span>
					<</switch>>
					housekeeping skill required.
				</span>
				<<set $_disableBuild to true>>
			<</if>>
			<<if _towerUpgrades[_upgrade].gradeRequired>>
				<<for $_grade range Object.keys(_towerUpgrades[_upgrade].gradeRequired)>>
					<<set $_gradeDisplay to $_grade>>
					<<if $_gradeDisplay is "english">>
						<<set $_gradeDisplay to $_gradeDisplay.toUpperCase()>>
					<</if>>
					<<if _towerUpgrades[_upgrade].gradeRequired[$_grade] lt V[$_grade + "trait"]>>
						<br>
						<span class="black">
						<<switch _towerUpgrades[_upgrade].gradeRequired>>
							<<case 1>>Passable $_gradeDisplay required
							<<case 2>>Decent $_gradeDisplay required
							<<case 3>>Good $_gradeDisplay required
							<<case 4>>Excellent $_gradeDisplay required
						<</switch>>
						</span>
						<<set $_disableBuild to true>>
					<<else>>
						<br>
						<span class="green">
						<<switch _towerUpgrades[_upgrade].gradeRequired>>
							<<case 1>>Passable $_gradeDisplay required
							<<case 2>>Decent $_gradeDisplay required
							<<case 3>>Good $_gradeDisplay required
							<<case 4>>Excellent $_gradeDisplay required
						<</switch>>
						</span>
					<</if>>
				<</for>>
			<</if>>
			<<if _towerUpgrades[_upgrade].activityRequired>>
				<br>
				<<if $bird.state isnot "home" or $bird.activity isnot _towerUpgrades[_upgrade].activityRequired>>
					<span class="red">Requires the Great Hawk to be home and building the nest.</span>
				<<else>>
					<span class="green">Requires the Great Hawk to be home and building the nest.</span>
				<</if>>
			<</if>>
			<<if _towerUpgrades[_upgrade].upgradesRequired>>
				<<for $_upgradesRequired range Object.keys(_towerUpgrades[_upgrade].upgradesRequired)>>
					<<if _towerUpgrades[_upgrade].upgradesRequired[$_upgradesRequired] lt $bird.upgrades[$_upgradesRequired]>>
						<br>
						<span class="black">
						<<if ["toolbox", "tarp", "pot"].includes($_upgradesRequired)>>
							<<print $_upgradesRequired.toUpperCase()>> required
						<<else>>
							<<print $_upgradesRequired.toUpperCase()>> level <<number $bird.upgrades[$_upgradesRequired]>> required
						<</if>>
						</span>
						<<set $_disableBuild to true>>
					<<else>>
						<br>
						<span class="green">
						<<if ["toolbox", "tarp", "pot"].includes($_upgradesRequired)>>
							<<print $_upgradesRequired.toUpperCase()>> required (obtained)
						<<else>>
							<<print $_upgradesRequired.toUpperCase()>> level <<number $bird.upgrades[$_upgradesRequired]>> required (obtained)
						<</if>>
						</span>
					<</if>>
				<</for>>
			<</if>>
			<<if _towerUpgrades[_upgrade].materialsUsed>>
				<<for $_materialDisplay1 range Object.keys(_towerUpgrades[_upgrade].materialsUsed)>>
					<<if _towerUpgrades[_upgrade].materialsUsed[$_materialDisplay1] gt $bird.materials[$_materialDisplay1]>>
						<br>
						<span class="black">More $_materialDisplay1 required.</span> <<bird_materials_required $_materialDisplay1 _towerUpgrades[_upgrade].materialsUsed[$_materialDisplay1]>>
						<<set $_disableBuild to true>>
					<</if>>
				<</for>>
			<</if>>
			<<if _towerUpgrades[_upgrade].timeTaken>>
				<<set _hours to Math.floor(_towerUpgrades[_upgrade].timeTaken / 60)>>
				<<set _minutes to _towerUpgrades[_upgrade].timeTaken % 60>>
				<<set _timeString to " (" +_hours+":"+(_minutes lt 10 ? "0": "")+_minutes+")">>
			<<else>>
				<<set _timeString to "">>
			<</if>>
			<<if $_disableBuild>>
			<<elseif $bird.upgrades[_upgrade] is 0>>
				<br>
				<<link [["Build" + _timeString|_towerUpgrades[_upgrade].passage]]>>
					<<set $bird.upgrades[_upgrade]++>>
					<<if _towerUpgrades[_upgrade].timeTaken>><<bird_pass `_towerUpgrades[_upgrade].timeTaken`>><</if>>
					<<if _towerUpgrades[_upgrade].materialsUsed>>
						<<for $_materialsUsed range Object.keys(_towerUpgrades[_upgrade].materialsUsed)>>
							<<set $bird.materials[$_materialsUsed] -= _towerUpgrades[_upgrade].materialsUsed[$_materialsUsed]>>
						<</for>>
					<</if>>
				<</link>>
				<<for $_materialDisplay2 range Object.keys(_towerUpgrades[_upgrade].materialsUsed)>>
					| <<bird_materials_required $_materialDisplay2 _towerUpgrades[_upgrade].materialsUsed[$_materialDisplay2]>>
				<</for>>
			<<else>>
				<br>
				<<link [["Improve" + _timeString|_towerUpgrades[_upgrade].passage]]>>
					<<set $bird.upgrades[_upgrade]++>>
					<<if _towerUpgrades[_upgrade].timeTaken>><<bird_pass `_towerUpgrades[_upgrade].timeTaken`>><</if>>
					<<if _towerUpgrades[_upgrade].materialsUsed>>
						<<for $_materialsUsed range Object.keys(_towerUpgrades[_upgrade].materialsUsed)>>
							<<set $bird.materials[$_materialsUsed] -= _towerUpgrades[_upgrade].materialsUsed[$_materialsUsed]>>
						<</for>>
					<</if>>
				<</link>>
				<<for $_materialDisplay2 range Object.keys(_towerUpgrades[_upgrade].materialsUsed)>>
					| <<bird_materials_required $_materialDisplay2 _towerUpgrades[_upgrade].materialsUsed[$_materialDisplay2]>>
				<</for>>
			<</if>>
		<</if>>
	</div>
<</widget>>

<<widget "bird_materials_required">> |
	<<if _args[0] and _args[1]>>
		<<print _args[0].toUpperCase()>> required: <<number _args[1]>>
	<<else>>
		No materials required
	<</if>>
<</widget>>

:: testScopedVar [nobr]

We've extended normal widgets to include a call scoped namespace.
This means that other widgets can use the same name without fear of
overriding that value.<br>

This namespace uses $$_ as a prefix. Note that using it outside of
a widget always results in an undefined value.<br>

Below is a set of tests to confirm the behavior of $$, _ and $_ values<br>
<<widget "testScopedVar">>
<br>Inside of first widget<br><br>
Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

<br>Setting values for each value type in first widget<br><br>

<<set $val = 1>>
<<set _val = 10>>
<<set $_.val = 100>><br>
Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

<br>Invoking second widget<br><br>

<<testScopedVar2>>

<br>After second widget<br><br>

Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

<</widget>>

<<widget "testScopedVar2">>
<br>Inside of second widget<br><br>

Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

<br>Setting values for each value type in second widget<br><br>

<<set $val = 2>>
<<set _val = 20>>
<<set $_.val = 200>>

Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

<</widget>>



<br>Before widget is invoked<br><br>

Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

<<testScopedVar>>

<br>After widget is invoked<br><br>

Global $ val = $val<br>
Local _ val = _val<br>
Scoped $ _ val = $_.val<br>

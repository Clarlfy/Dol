:: Location Widgets [widget]

<<widget "init_locations">>
	/*
		parent: the location this location is in. values are inherited from here
		area: marker for locations that represent large areas with many locations inside. you don't usually want to set the pc
		      location to them. use a more specialized location instead.
		bus: marker for sub-areas within the town
		outside: if the location is outside or indoors
		tanning: factor applied to tanning. only used for outside locations
		location: locations that should show up in C.location, don't set this on e.g. indoor variants or single rooms. you can get
		          those with C.sublocation if you need them
	*/
	<<script>>
		setup.addlocation = function(location) {
			setup.locations[location] = { name: location, parent: "world" };
			return {
				data: setup.locations[location],
				parent: function(parent) {
					this.data.parent = parent;
					return this;
				},
				area: function() {
					this.data.area = true;
					return this;
				},
				bus: function() {
					this.data.bus = true;
					return this;
				},
				outside: function() {
					this.data.outside = true;
					return this;
				},
				inside: function() {
					this.data.outside = false;
					return this;
				},
				tanning: function(tanning) {
					this.data.tanning = tanning;
					return this;
				},
				descr: function(descr) {
					this.data.descr = descr;
					return this;
				},
				location: function(name = undefined) {
					this.data.location = true;
					this.data.location_name = name; /* override for weird inheritance, e.g. drains */
					return this;
				}
			 };
		};
		setup.locations = {
			world: {
				parent: undefined,
				area: true,
				location: true,
				bus: false,
				outside: true,
				tanning: 1.0
			}
		};

		setup.addlocation("town"                      ).parent("world").area().location().tanning(0.5);

		setup.addlocation( "alley"                    ).parent("town").location();
		setup.addlocation( "beach"                    ).parent("town").location().tanning(1.1);
		setup.addlocation( "drain"                    ).parent("town").location().inside();
		setup.addlocation(  "sewers"                  ).parent("drain").location();
		setup.addlocation( "underground"              ).parent("town").location().inside(); /* both underground brothel and various caves */

		setup.addlocation( "residential"              ).parent("town").bus();
		setup.addlocation(  "domus"                   ).parent("residential").bus();
		setup.addlocation(   "home"                   ).parent("domus").location().inside();
		setup.addlocation(    "backyard"              ).parent("home").outside();
		setup.addlocation(    "garden"                ).parent("home").outside();
		setup.addlocation(  "barb"                    ).parent("residential").bus();
		setup.addlocation(   "dance_studio"           ).parent("barb").location().inside();
		setup.addlocation(   "police_station"         ).parent("barb").location().inside();
		setup.addlocation(  "danube"                  ).parent("residential").bus();
		setup.addlocation(   "spa"                    ).parent("danube").location().inside();
		setup.addlocation(  "wolf"                    ).parent("residential").bus();
		setup.addlocation(   "temple"                 ).parent("danube").location().inside();
		setup.addlocation(  "residential_alley"       ).parent("residential").location("allay");
		setup.addlocation(  "residential_drain"       ).parent("residential").location("drain").inside();

		setup.addlocation( "commercial"               ).parent("town").bus().location();
		setup.addlocation(  "connudatus"              ).parent("town").bus();
		setup.addlocation(   "strip_club"             ).parent("connudatus").location().inside();
		setup.addlocation(  "cliff"                   ).parent("town").bus();
		setup.addlocation(   "cafe"                   ).parent("cliff").location().inside();
		setup.addlocation(    "cafe_outside"          ).parent("cafe").outside(); /* outside seating */
		setup.addlocation(  "high"                    ).parent("town").bus();
		setup.addlocation(   "shopping_centre"        ).parent("high").location().inside();
		setup.addlocation(    "shopping_centre_roof"  ).parent("shopping_centre").location().inside();
		setup.addlocation(  "starfish"                ).parent("town").bus();
		setup.addlocation(   "arcade"                 ).parent("starfish").location().inside();
		setup.addlocation(  "nightingale"             ).parent("town").bus();
		setup.addlocation(   "hospital"               ).parent("nightingale").location().inside();
		setup.addlocation(  "park"                    ).parent("town").location().tanning(0.75);
		setup.addlocation(   "parkmens"               ).parent("park").inside().bus().descr("Men's Room");
		setup.addlocation(   "parkwomens"             ).parent("park").inside().bus().descr("Women's Room");
		setup.addlocation(   "chocolate_stand"        ).parent("park").inside();
		setup.addlocation(   "parkcafe"               ).parent("park").inside();
		setup.addlocation(   "parktree"               ).parent("park").inside().descr("Park");
		setup.addlocation(  "oxford"                  ).parent("town").bus();
		setup.addlocation(   "school"                 ).parent("oxford").location().inside();
		setup.addlocation(    "schoolgrounds"         ).parent("school").outside();
		setup.addlocation(    "pool"                  ).parent("school").location();
		setup.addlocation(   "museum"                 ).parent("oxford").location().inside();
		setup.addlocation(  "commercial_alley"        ).parent("commercial").location("allay");
		setup.addlocation(  "commercial_drain"        ).parent("commercial").location("drain").inside();

		setup.addlocation( "industrial"               ).parent("town").bus().location();
		setup.addlocation(  "mer"                     ).parent("industrial").bus();
		setup.addlocation(   "docks"                  ).parent("mer").location().outside();
		setup.addlocation(    "docks_building"        ).parent("docks").inside();
		setup.addlocation(  "elk"                     ).parent("industrial").bus();
		setup.addlocation(   "compound"               ).parent("elk").location();
		setup.addlocation(    "compound_building"     ).parent("compound").location().inside();
		setup.addlocation(   "landfill"               ).parent("elk").location();
		setup.addlocation(   "night_monster_lair"     ).parent("elk").location().inside();
		setup.addlocation(  "harvest"                 ).parent("industrial").bus();
		setup.addlocation(   "brothel"                ).parent("harvest").location().inside();
		setup.addlocation(   "pub"                    ).parent("harvest").location().inside();
		setup.addlocation(  "industrial_alley"        ).parent("industrial").location("allay");
		setup.addlocation(  "industrial_drain"        ).parent("industrial").location("drain").inside();

		setup.addlocation("forest"                    ).parent("world").area().location().tanning(0.1);
		setup.addlocation( "wolf_cave"                ).parent("forest").location().inside();
		setup.addlocation(  "wolf_cave_yard"          ).parent("wolf_cave").outside().tanning(0.5);
		setup.addlocation( "asylum"                   ).parent("forest").location().inside();
		setup.addlocation(  "asylum_yard"             ).parent("asylum").outside().tanning(0.5);
		setup.addlocation( "cabin"                    ).parent("forest").location().inside();
		setup.addlocation( "lake"                     ).parent("forest").location().tanning(1.0);
		setup.addlocation(  "lake_ruin"               ).parent("lake").location().inside();

		setup.addlocation("plains"                    ).parent("world").area();
		setup.addlocation( "farm"                     ).parent("plains").location(); /* underground farm */
		setup.addlocation(  "estate"                  ).parent("farm").location();
		setup.addlocation( "alex_farm"                ).parent("plains").location();
		setup.addlocation(  "alex_cottage"            ).parent("alex_farm").location().inside();
		setup.addlocation(  "alex_stables"            ).parent("alex_farm").inside();
		setup.addlocation( "riding_school"            ).parent("plains").location();
		setup.addlocation( "moor"                     ).parent("plains").location();
		setup.addlocation(  "tower"                   ).parent("moor").location();

		setup.addlocation("sea"                       ).parent("world").area().location();

		setup.addlocation("tentworld"                 ).parent("world").area().location().tanning(0);

	<</script>>
	<<compute_locations>>
<</widget>>

<<widget "compute_locations">>
	<<script>>
		for (const location in setup.locations) {
			setup.locations[location].name = location;
			if (setup.locations[location].descr === undefined) {
				setup.locations[location].descr = location.replace(/_/, " ").replace(/(^|\s)\S/g, function(t) { return t.toUpperCase() });
			}
			
			let parent = location;
			while (parent !== undefined) {
				if (setup.locations[location].area_name === undefined && setup.locations[parent].area) {
					setup.locations[location].area_name = parent.name;
				}
				if (setup.locations[location].location_name === undefined && setup.locations[parent].location) {
					setup.locations[location].location_name = parent.name;
				}
				if (setup.locations[location].bus_name === undefined && setup.locations[parent].bus) {
					setup.locations[location].bus_name = parent.name;
				}
				if (setup.locations[location].outside === undefined && setup.locations[parent].outside !== undefined) {
					setup.locations[location].outside = parent.outside;
				}
				if (setup.locations[location].tanning === undefined && setup.locations[parent].tanning !== undefined) {
					setup.locations[location].tanning = parent.tanning;
				}
				parent = parent.parent;
			}
			if (!setup.locations[location].outside) {
				setup.locations[location].tanning = 0;
			}
		}
	<</script>>
<</widget>>

<!-- This shall replace all "set $location/$outside/$bus" when this system is fully implemented -->

<<widget "location">>
	<<set _location to $args[0]>>
	<<if ndef setup.locations[_location]>>
		<<set $locationerror to _location>>
	<<else>>
		<<set $sublocation to _location>>

		<<set $area to C.area>>
		<<set $location to C.location>>
		<<if def C.bus>>
			<<set $bus to C.bus>>
		<</if>>
		<<set $outside to C.outside>>
	<</if>>
<</widget>>

<!-- Do NOT use these computes until all "set $location"s have been eliminated! -->

<<compute "area">>
	setup.locations[$sublocation].area_name
<</compute>>

<<compute "location">>
	setup.locations[$sublocation].location_name
<</compute>>

<<compute "sublocation">>
	setup.locations[$sublocation].name
<</compute>>

<<compute "bus">>
	setup.locations[$sublocation].bus_name
<</compute>>

<<compute "outside">>
	setup.locations[$sublocation].outside
<</compute>>

<<compute "tanning">>
	setup.locations[$sublocation].tanning
<</compute>>

<<compute "location_pretty_name">>
	setup.locations[$sublocation].descr
<</compute>>


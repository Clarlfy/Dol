:: Pregnancy [widget]

<<widget "moveCreature">>
	/*0 -> _pregnancy.fetus[_i] or location (any but portable)*/
	/*1 -> Type*/
	/*2 -> locationId*/
	<<if _args[0] isnot null and _args[1]>>
		<<set _portable to $container.portable>>
		<<set _container to $container[$phase]>>
		<<set $_pregnancy to $sexStats[_args[3] or "anus"].pregnancy>>

		<<set _result to _args[1]>>
		<<switch _args[0]>>
			<<case 0 1 2 3>>
				<!-- With a number as argument 0, it takes the parasite of that argument in your current pregnancy item -->
				<<set _creature to clone($_pregnancy.fetus[_args[0]])>>
			<<default>>
				<!-- With a string as argument 0, it takes a parasite from the container matching the argument. Which parasite it takes corresponds to argument 2 -->
				<!-- Currently only used when transferring parasites for selling in :: Containers, inside a for loop -->
				<<if _args[2] isnot null>>
					<<set _creature to clone($container[_args[0]].creatures[_args[2]])>>
				<</if>>
		<</switch>>

		<<if _creature>>
			<<if _result is "destroy">>
				<!-- Simply gets rid of the parasite -->
				<<set _creature to null>>
				<<removeCreature _args[0] _args[2] _args[3]>>
			<<elseif _result is "portable">>
				<!-- Transfers the parasites for selling. The value of the parasite depends on its growth stat -->
				<<set _portable.creatures.push(clone(_creature))>>
				<<set _value to Math.floor(1000 / _creature.stats.growth)>>
				<<set _portable.value += _value>>
				<<removeCreature _args[0] _args[2] _args[3]>>
			<<elseif _result is "replace" and _args[2] isnot null and _args[0] gte 0 and _args[0] lte 3>>
				<!-- Replaces an existing parasite, for when you birth more than you can currently store -->
				<!-- The replaced parasite gets transferred for selling -->
				<<if _container.creatures[_i] isnot undefined>>
					<<if _container.creatures[_i] isnot null>>
						<<set _portable.creatures.push(clone(_container.creatures[_args[2]]))>>
						<<set _value to Math.floor(1000 / _container.creatures[_args[2]].stats.growth)>>
						<<set _portable.value += _value>>
						<<set _container.creatures[_args[2]] to clone(_creature)>>
						<<set _replaced to true>>
					<</if>>
				<</if>>
				<<if _replaced isnot true>>
					<<set _container.creatures[_args[2]] to clone(_creature)>>
					<<set _container.count += 1>>
				<</if>>
				<<removeCreature _args[0] undefined _args[3]>>
			<<elseif _result is "container">>
				<!-- Keeps the parasite and moves it to the current container -->
				<<set _moveTo to false>>
				<<for _containerSlot to 0; _containerSlot lt _container.maxCount; _containerSlot++>>
					<<if _container.creatures[_containerSlot] is undefined>>
						<<set _moveTo to true>>
					<<elseif _container.creatures[_containerSlot] is null>>
						<<set _moveTo to true>>
					<</if>>
					<<if _moveTo is true>>
						<<set $container[$phase].creatures[_containerSlot] to clone(_creature)>>
						<<set $container[$phase].count += 1>>
						<<removeCreature _args[0] _args[2] _args[3]>>
						<<break>>
					<</if>>
				<</for>>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "removeCreature">>
	<<if _args[0] isnot null>>
		<<set $_pregnancy to $sexStats[_args[2] or "anus"].pregnancy>>
		<<switch _args[0]>>
			<<case 0 1 2 3>>
				<!-- With a number as argument 0, it removes the parasite of that argument in your current pregnancy item -->
				<<set $_pregnancy.fetus[_args[0]].toDelete to true>>
				<<set $_pregnancy.parasiteBirthEvents += 1>>
				<<if $_pregnancy.motherStatus is 0 and $_pregnancy.parasiteBirthEvents gte 3>>
					<<set $_pregnancy.motherStatus to 1>>
				<</if>>
			<<default>>
				<!-- With a string as argument 0, it removes a parasite from the container matching the argument. Which parasite it takes corresponds to argument 1 -->
				<<if _args[1] isnot null>>
					<<set $container[_args[0]].creatures[_args[1]] to null>>
					<<set $container[_args[0]].count -= 1>>
				<</if>>
		<</switch>>
	<</if>>
<</widget>>

<<widget "clearToDeleteParasiteFetus">>
	<<if $sexStats.anus.pregnancy.type is "parasite">>
		<<run $sexStats.anus.pregnancy.fetus to $sexStats.anus.pregnancy.fetus.filter(child => child && !child.toDelete)>>
		<<if $sexStats.anus.pregnancy.fetus.length is 0>>
			<<set $sexStats.anus.pregnancy.type to null>>
		<</if>>
	<</if>>
	<<if $sexStats.vagina.pregnancy.type is "parasite">>
		<<run $sexStats.vagina.pregnancy.fetus to $sexStats.vagina.pregnancy.fetus.filter(child => child && !child.toDelete)>>
		<<if $sexStats.vagina.pregnancy.fetus.length is 0>>
			<<set $sexStats.vagina.pregnancy.type to null>>
		<</if>>
	<</if>>
<</widget>>

<<widget "menstruationCycleState">>
	<<set $sexStats.vagina.menstruation.running to $player.vaginaExist or (!$player.vaginaExist and $skin and $skin.pubic.pen is "magic" and $skin.pubic.special is "pregnancy")>>
<</widget>>

<<widget "menstruationCycle">>
	<<set _menstruation to $sexStats.vagina.menstruation>>
	<<if _args[0] is "daily">>/*Daily cycle*/
		<<set _menstruation.nonCycleRng.push(random(0,6))>>
		<<set _menstruation.nonCycleRng.deleteAt(0)>>
	<<elseif _args[0] is "overdose">>/*Daily cycle*/
		<<set _menstruation.nonCycleRng[0] to 0>>
	<</if>>

	<<menstruationCycleState>>

	<<if _menstruation.running is true>>
		<<set $_pregnancy to getPregnancyObject()>>
		<<set _pills to $sexStats.pills>>
		<<switch _menstruation.currentState>>
			<<case "normal">>
				<<if $cycledisable is "t">>
					<<playerPregnancyAttempt `Math.pow(4,_menstruation.nonCycleRng[0])` $_pregLocation>>
				<<elseif _menstruation.currentDay lt _menstruation.currentDaysMax>>
					/*Continue the cycle again*/
					<<if _menstruation.currentDay gte _menstruation.currentDaysMax / 2 and _menstruation.lastDaysMax isnot _menstruation.currentDaysMax>>
					<</if>>
					<<if _menstruation.currentDay lt _menstruation.stages[1]>>
						/*Menstrual phase - period occurs right at the start of this part*/
						<<if _pills.pills["fertility booster"].doseTaken gte 2>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						<<if (_pills.pills["contraceptive"].doseTaken gte 1 and random(0,100) gte 50) or _pills.pills["contraceptive"].doseTaken gte 2>>
						<<else>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
					<<elseif _menstruation.currentDay lt _menstruation.stages[2]>>
						/*Follicular phase*/
						<<if _pills.pills["fertility booster"].doseTakenn gte 2 and _menstruation.currentDay lt _menstruation.stages[2]>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy" and _menstruation.currentDay lt _menstruation.stages[2]>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						<<if _menstruation.currentDay lt _menstruation.stages[2]>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						/*Check for pregnancy at a reduced chance for a few days before*/
						<<if _menstruation.currentDay gte _menstruation.stages[3] - 4>>
							<<set $_multi = Math.clamp(Math.ceil(6 * (1 + _menstruation.stages[3] - _menstruation.currentDay)),6,30)>>
							<<playerPregnancyAttempt $_multi $_pregLocation>>
						<</if>>
					<<elseif _menstruation.currentDay lt _menstruation.stages[3]>>
						/*Ovulation phase*/
						<<set _menstruation.currentDay += 0.5>>
						<<set _menstruation.lastDaysMax to _menstruation.currentDaysMax>>

						/*Check for pregnancy*/
						<<playerPregnancyAttempt 3 $_pregLocation>>
					<<else>>
						/*Luteal phase*/
						/*Check for pregnancy at a reduced chance for a few days after*/
						<<if _menstruation.currentDay lte _menstruation.stages[3] + 4>>
							<<set $_multi = Math.clamp(Math.ceil(6 * (1 + _menstruation.currentDay - _menstruation.stages[3])),6,30)>>
							<<playerPregnancyAttempt $_multi $_pregLocation>>
						<</if>>
						<<if _pills.pills["fertility booster"].doseTaken gte 2>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
						<<if (_pills.pills["contraceptive"].doseTaken gte 1 and random(0,100) gte 50) or _pills.pills["contraceptive"].doseTaken gte 2>>
						<<else>>
							<<set _menstruation.currentDay += 0.5>>
						<</if>>
					<</if>>
				<<else>>
					/*Start the cycle again*/
					<<restartMenstruationCycle>>
					<<set _menstruation.periodEnabled to true>>
				<</if>>
			<<case "pregnant">>
				/*To progress as normal so that the heat cycle and pregnancy risk still works as normal, will be reset in the recovering stage*/
				<<if (_pills.pills["contraceptive"].doseTaken gte 1 and random(0,100) gte 50) or _pills.pills["contraceptive"].doseTaken gte 2>>
				<<else>>
					<<set _menstruation.currentDay += 0.5>>
				<</if>>
				<<if _menstruation.currentDay lt _menstruation.stages[3]>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if _pills.pills["fertility booster"].doseTaken gte 2>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if _menstruation.currentDay lt _menstruation.currentDaysMax>>
						<<set _menstruation.currentDay to 0.5>>
					<</if>>
				<</if>>
			<<case "recovering">>
				<<set _menstruation.recoveryTime -= 0.5>>
				<<switch _pills.pills["fertility booster"].doseTaken>>
					<<case 1>><<set _menstruation.recoveryTime -= 0.5>>
					<<case 2 3 4>><<set _menstruation.recoveryTime -= 1>>
				<</switch>>
				<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
					<<set _menstruation.recoveryTime -= 0.5>>
				<</if>>
				<<if $_pregnancy.totalBirthEvents gt 2>>
					<<set _menstruation.recoveryTime -= 0.5>>
				<</if>>
				<<set _menstruation.recoveryStage to Math.floor((1 - (_menstruation.recoveryTime / _menstruation.recoveryTimeStart))*5)>>
				<<if _menstruation.recoveryTime lte 0>>
					<<set $effectsmessage to 1>>
					<<set $recovered_from_pregnancy to 1>>
					/*Ready to give birth again*/
					<<restartMenstruationCycle>>
					<<set _menstruation.currentState to "normal">>
					<<set _menstruation.recoveryTime to null>>
					<<set _menstruation.recoveryTimeStart to null>>
					<<set _menstruation.recoveryStage to null>>
				<</if>>
		<</switch>>
	<</if>>
	<<updateRecordedSperm "vagina" "pc" 0.5>>
	<<updateRecordedSperm "anus" "pc" 0.5>>
<</widget>>

<<widget "rutCycle">>
	<<if $player.penisExist and ($wolfgirl gte 2 or $cat gte 2 or $cow gte 2)>>
		<<if !$player.beastRut>>
			<<set $player.beastRut to 0>>
		<</if>>
		<<set $_pills = $sexStats.pills.pills>>
		<<if $wolfgirl gte 2>>
			<<set $_changeReduction to $wolfbuild>>
		<<elseif $cat gte 2>>
			<<set $_changeReduction to $catbuild>>
		<<elseif $cow gte 2>>
			<<set $_changeReduction to $cowbuild>>
		<</if>>
		<<set $player.beastRut += 1 + $_pills["fertility booster"].doseTaken>>

		<<if $player.beastRut gte random(30 - Math.ceil($_changeReduction / 5), 120 - Math.clamp($_changeReduction, 0, 100)) or _args[0] or $_pills["fertility booster"].doseTaken gt 2>>
			<<set $player.beastRut to 0>>
		<</if>>
	<<else>>
		<<run delete $player.beastRut>>
	<</if>>
<</widget>>

:: Pregnancy2 [widget]

<<widget "bodyPregCalc">>
	<<switch $bodysize>>
		<<case 0>><<set _bodySize to ["tiny","tiny","tiny","small","small","normal","large"]>>
		<<case 1>><<set _bodySize to ["tiny","tiny","small","small","small","normal","normal","large"]>>
		<<case 2>><<set _bodySize to ["tiny","small","small","normal","normal","normal","large","large"]>>
		<<case 3>><<set _bodySize to ["tiny","small","normal","normal","large","large","large"]>>
		<<default>>
	<</switch>>
	<<set _hairColour to [$naturalhaircolour, $naturalhaircolour, $naturalhaircolour, $naturalhaircolour,"red","jetblack","black","brown","burntorange","platinumblond","strawberryblond","ginger","ashyblond","blond"]>>
<</widget>>

/*Don't call outside of the menstruationCycle widget*/
<<widget "restartMenstruationCycle">>
	<<set _menstruation.currentDay to 0.5>>
	<<set _menstruation.currentDaysMax to _menstruation.baseDays + random(0, _menstruation.baseDaysRng)>>
	<<set _stage2 to Math.round(_menstruation.currentDaysMax * 0.17)>>
	<<if _stage2 gte 4>>
		<<set _stage2-->>
	<</if>>
	<<set _stage3 to Math.round(_menstruation.currentDaysMax * 0.5)>>
	<<if _stage3 lt 13>>
		<<set _stage3++>>
	<<elseif _stage3 gte 18>>
		<<set _stage3-->>
	<</if>>
	<<set _menstruation.stages to [0, _stage2, _stage3, _stage3 + random(1,2) * 0.5]>>
<</widget>>

/* Used for the passage where the player has given birth in */
<<widget "playerPrebirth">>
	<<set getPregnancyObject().gaveBirth to true>>
<</widget>>

/*args[0] - mother, args[1] - birth location, args[2] - location of where the clildren should go to, _args[3] - next passage, _args[4] - time passage*/
/*args[0] - birth location, args[1] - location of where the clildren should go to, _args[2] - next passage, _args[3] - time passage*/
<<widget "birthUi">>
	<<if _args[0] is "pc">>
		<<set _pregnancyBirth to getPregnancyObject()>>
	<<elseif C.npc[_args[0]]>>
		<<set _pregnancyBirth to getPregnancyObject(_args[0])>>
	<</if>>
	<<if _pregnancyBirth and _pregnancyBirth.fetus>>
		<div id="birthUi">
			<<for _i to 0; _i lt _pregnancyBirth.fetus.length; _i++>>
				<<capture _i>>
					<div @id="'child-' + _i" class="childUi">
						<<birthChildElement _args[0] _i>>
					</div>
				<</capture>>
			<</for>>
		</div>
		<br>
		<<if _args[3]>>
			<<set _hours to Math.floor(_args[4] / 60)>>
			<<set _minutes to _args[4] % 60>>
			<<set _timeString to " (" + (_hours lt 10 ? "0": "") +_hours+":"+(_minutes lt 10 ? "0": "")+_minutes+")">>
		<</if>>
		<<link [["Next" + (_args[4] ? _timeString : "")|_args[3]]]>>
			<<if _args[0] is "pc">>
				<<run delete _pregnancyBirth.gaveBirth>>
				<<endPlayerPregnancy _args[1] _args[2]>>
			<<elseif $NPCNameList.includes(_args[0])>>
				<<endNpcPregnancy _args[0] _args[1] _args[2]>>
			<</if>>
		<</link>>
	<<else>>
		Error Pregnancy Object not found in the passage '<<print $passage>>'.
	<</if>>
<</widget>>

<<widget "birthChildElement">>
	<<if _pregnancyBirth>>
		<<capture _args>>
			<<if _pregnancyBirth.fetus[_args[1]].type isnot "human">>
				Type: <<print _pregnancyBirth.fetus[_args[1]].type[0].toUpperCase() + _pregnancyBirth.fetus[_args[1]].type.substring(1)>> |
			<</if>>
			Gender:
			<<switch _pregnancyBirth.fetus[_args[1]].gender>>
				<<case "m">>Male
				<<case "f">>Female
				<<case "h">>Hermaphrodite
			<</switch>>
			<br>
			Mother:
			<<if _pregnancyBirth.fetus[_args[1]].motherKnown>>
				<<print pregnancyNameCorrection(_pregnancyBirth.fetus[_args[1]].mother, true)>>
			<<else>>
				????
			<</if>>
			| Father:
			<<if _pregnancyBirth.fetus[_args[1]].fatherKnown>>
				<<print pregnancyNameCorrection(_pregnancyBirth.fetus[_args[1]].father, true)>>
			<<else>>
				????
			<</if>>
			<br>
			Size: <<print _pregnancyBirth.fetus[_args[1]].features.size>> | Hair Colour: <<hairmapcolourtext _pregnancyBirth.fetus[_args[1]].features.hairColour>>
			<<if _pregnancyBirth.fetus[_args[1]].features.skinColour>>
				| Skin Colour: <<skinColourName _pregnancyBirth.fetus[_args[1]].features.skinColour>>
			<</if>>
			<br>
			<<if _pregnancyBirth.fetus[_args[1]].features.identical>>
				Identical: <<print _pregnancyBirth.fetus[_args[1]].features.identical>>
				<br>
			<</if>>
			<label><<print '<<textbox "_pregnancyBirth.fetus['+_args[1]+'].name" `_pregnancyBirth.fetus['+_args[1]+'].name or ""`>>'>></label>
			<br>
			<span class="no-numberify">
				<<link "Random Name">>
					<<if _args[0] is "pc">>
						<<if $player.vaginaExist>>
							<<set _pregnancyNaming to $sexStats.vagina.pregnancy>>
						<<else>>
							<<set _pregnancyNaming to $sexStats.anus.pregnancy>>
						<</if>>
					<<elseif C.npc[_args[0]] and C.npc[_args[0]].pregnancy>>
						<<set _pregnancyNaming to C.npc[_args[0]].pregnancy>>
					<</if>>
					<<set _pregnancyNaming.fetus[_args[1]].name to generateBabyName(undefined, _pregnancyNaming.fetus[_args[1]].gender, _expectedChildId)>>
					<<replace `"#child-" + _args[1]`>><<birthChildElement _args[0] _args[1]>><</replace>>
				<</link>>
			</span>
			<small class="right">
				saveId: <<print $saveId>>
				<<if $saveName isnot "">>
					| name: <<print $saveName>>
				<</if>>
			</small>
		<</capture>>
	<<else>>

	<</if>>
<</widget>>

<<widget "wakingEffects">><<silently>>
	<<if !$sexStats.vagina.menstruation.running>>
	<<elseif _args[0] and $sexStats.vagina.menstruation.currentState is "pregnant" or ($sexStats.vagina.menstruation.currentState is "normal" and ($playerPregnancyHumanDisable is "f" or $playerPregnancyBeastDisable is "f"))>>
		<<set $_pregnancy to getPregnancyObject()>>
		<<set _wakingEffect to wakingPregnancyEvent()>>
		<<if Array.isArray(_wakingEffect)>>
			<<set _wakingEffect to _wakingEffect[random(0,_wakingEffect.length - 1)]>>
		<</if>>
		<<switch _wakingEffect>>
			<<case "tired">>
				<<set $_text_output to "You wake up feeling more tired than rested.<<tiredness 10>><<gtiredness>>">>
			<<case "crying">>
				<<set $_text_output to "You wake up in tears. You aren't even sure why you're crying, but the emotion quickly passes.">>
			<<case "angry">>
				<<set $_text_output to "You wake up feeling angry. The mood takes you by surprise, but soon passes.">>
			<<case "meatCraving">>
				<<set $_text_output to `You awaken to a strange craving ${V.wolfgirl >= 2 ? "of digging your fangs into" : "for"} something meaty.`>>
			<<case "foodCraving">>
				<<set $_text_output to `You awaken to a strange craving for something ${["sweet","spicy","sour","savory","bitter"][random(0,4)]}.`>>
			<<case "headache">>
				<<set $_text_output to "You wake up to your head throbbing. You're not sure what brought on this headache, but it eventually passes.">>
			<<case "sensitiveBreasts">>
				<<set $_text_output to "You wake to your <<breasts>> feeling more tender than normal. Thankfully, it passes.">>
			<<case "bloated">>
				<<set $_text_output to "You wake feeling a little bloated.">>
				<<set $daily.bloated to random(1,2)>>
			<<case "lightHeaded">>
				<<set $_text_output to "You wake feeling a little lightheaded for a moment.">>
			<<case "dizzy">>
				<<set $_text_output to "You wake feeling a little dizzy, but it passes quickly.">>
			<<case "mildNausea">>
				<<set $_text_output to "You wake feeling a little nauseous, but it passes quickly.">>
			<<case "nausea">>
				<<set $_text_output to "You wake feeling nauseous, but it passes after some time.">>
			<<case "dryheaving">>
				<<if $location is "wolf_cave">>
					<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to the edge of the cave. You're forced to do a dry heave by it.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
				<<elseif $location is "farm">>
					<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to the edge of the barn. You're forced to do a dry heave by it.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
				<<elseif $location is "tower">>
					<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to the edge of the tower. You're forced to do a dry heave over it.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
				<<else>>
					<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to a nearby bin. You're forced to do a dry heave into it.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
				<</if>>
				<<if $awareness gte 200 and $sciencetrait gte 4 and playerNormalPregnancyTotal() gte 1>>
					<<set $_text_output += " <span class='red'>Maybe you should get tested</span>.">>
				<</if>>
			<<case "lightBabyKick">>
				<<set $_text_output to "You wake up feeling a light kick coming from your <<pregnancyBabyText 'pc'>>.<<stress -10>><<lstress>>">>
			<<case "babyKick">>
				<<set $_text_output to "You wake up feeling a kick coming from your <<pregnancyBabyText 'pc'>>.<<stress -10>><<lstress>><<pain 1>><<gpain>>">>
			<<case "babyMovement">>
				<<set $_text_output to "You wake up feeling your <<pregnancyBabyText 'pc'>> moving around.<<stress -10>><<lstress>>">>
			<<case "babyHiccup">>
				<<set $_text_output to "You wake up feeling some baby hiccups.<<stress -10>><<lstress>>">>
			<<case "earlyContractions">>
				<<set $_text_output to "You wake up to a brief and sporadic contraction.<<stress 5>><<gstress>><<pain 1>><<gpain>>">>
			<<case "bellySize">>
				<<set $_text_output to "You wake and take a look at your growing belly. It finally hits you; you're pregnant.">>
				<<if $_pregnancy.potentialFathers.length is 1>>
					<<set $_text_output += " It's clear that "+ $_pregnancy.potentialFathers[0].source +" is the father.">>
				<<else>>
					<<set $_text_output += " You wonder who the father is.">>
				<</if>>
				<<set $_pregnancy.awareOf to true>>
			<<case "missedPeriod">>
				<<set $_text_output to "You wake and come to a realisation. Your current cycle is late.">>
				<<if $awareness gte 200 and $sciencetrait gte 4 and playerNormalPregnancyTotal() gte 1>>
					<<set $_text_output += "You wonder if you're pregnant again. <span class='red'>Maybe you should get tested</span>.">>
				<</if>>
				<<set $sexStats.vagina.awareOfPeriodDelay to true>>
			<<case "clothesRemoval">>
				<<set $_text_output to `<span class="red">You wake up to a heavy pressure on your body.</span> `>>
				<<set $_slots to ["genitals","under_upper","upper","under_lower","lower"]>>
				<<set $_broken to []>>
				<<set $_removed to []>>
				<<for $_slot range $_slots>>
					<<if $worn[$_slot].type.includes("constricting")>>
						<<if $worn[$_slot].cursed>>
							<<if $worn[$_slot].name is "gold chastity belt" and $worn[$_slot].integrity gt 0>>
								<<set $_goldenCB to true>>
								<<set $antiquemoney += Math.floor(2000 / ($worn.genitals.integrity / clothingData('genitals',$worn.genitals,'integrity_max')))>>
							<<else>>
								<<set $_broken.pushUnique($worn[$_slot].name)>>
							<</if>>
							<<set $worn[$_slot].type.push("broken")>>
							<<generalRuined $_slot>>
						<<else>>
							<<set $_removed.pushUnique($worn[$_slot].name)>>
							<<generalUndress "wardrobe" $_slot>>
						<</if>>
					<</if>>
				<</for>>
				<<if $_removed.length gte 1>>
					<<set $_text_output += "You scramble to remove your " + formatList($_removed, "and", true) + ". ">>
				<</if>>
				<<if $_broken.length gte 1>>
					<<set $_text_output += "You look down to see your " + formatList($_broken, "and", true) + " broken. ">>
				<</if>>
				<<if $_goldenCB>>
					<<set $_text_output += `Loosened by your growing belly, your gold chastity belt clatters to the ground once you apply some pressure. <span class="blue">A collector might be interested by it.</span> `>>
				<</if>>
				<<set $_text_output += `<br><span class="red">Your pregnant body no longer supports such clothing.</span> <<pain 2>><<gpain>>`>>
		<</switch>>
	<</if>>
	<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "pregnancyDailyEvent">><<silently>>
	<<if !["Asylum Sleep","Cabin Sleep","Wolf Cave Sleep","Bird Tower Sleep","Livestock Sleep","Farm Abduction wake 4","Sleep","Avery Hotel Morning"].includes($passage)>>
		<<set _event to dailyPregnancyEvent(_rng)>>
		<<if Array.isArray(_event)>>
			<<set _event to _event[random(0,_event.length - 1)]>>
		<</if>>
		<<switch _event>>
			<<case "tired">>
				<<set $_text_output to "You yawn. Everything seems to take more effort than usual.<<tiredness 2>><<gtiredness>>">>
			<<case "crying">>
				<<set $_text_output to "You suddenly burst into tears. You aren't even sure why you're crying, but the sadness passes as quickly as it came.<<stress 5>><<gstress>>">>
			<<case "angry">>
				<<set $_text_output to "You feel angry out of nowhere. The change in mood takes you by surprise, but it soon passes.<<stress 5>><<gstress>>">>
			<<case "meatCraving">>
				<<set $_text_output to `You have a sudden, strange craving ${V.wolfgirl >= 2 ? "of digging your fangs into" : "for"} something meaty.`>>
			<<case "foodCraving">>
				<<set $_text_output to `You have a sudden, strange craving for something ${["sweet","spicy","sour","savory","bitter"][random(0,4)]}.`>>
			<<case "cramping">>
				<<set $_text_output to "You feel some cramping near your vagina.<<stress 5>><<gstress>><<pain 5>><<gpain>>">>
			<<case "bloated">>
				<<set $_text_output to "You feel a little bloated.<<stress 3>><<gstress>>">>
				<<set $daily.bloated to random(1,2)>>
			<<case "lightHeaded">>
				<<set $_text_output to "You feel a little lightheaded for a moment.">>
			<<case "dizzy">>
				<<set $_text_output to "You start feeling a little dizzy, but it passes quickly.">>
			<<case "mildNausea">>
				<<set $_text_output to "You start feeling a little nauseous, but it passes quickly.">>
			<<case "nausea">>
				<<set $_text_output to "You start feeling nauseous, but it passes after some time.">>
			<<case "lightBabyKick">>
				<<set $_text_output to "You feel a light kick coming from your <<pregnancyBabyText 'pc'>>.<<stress -10>><<lstress>>">>
			<<case "babyKick">>
				<<set $_text_output to "You feel a kick coming from your <<pregnancyBabyText 'pc'>>.<<stress -10>><<lstress>><<pain 1>><<gpain>>">>
			<<case "babyMovement">>
				<<set $_text_output to "You feel your <<pregnancyBabyText 'pc'>> moving around.<<stress -10>><<lstress>>">>
			<<case "babyHiccup">>
				<<set $_text_output to "You feel some baby hiccups.<<stress -10>><<lstress>>">>
			<<case "earlyContractions">>
				<<set $_text_output to "You feel a brief and sporadic contraction.<<stress 5>><<gstress>>">>
		<</switch>>
		<<if _event>>
			<<run delete $daily.pregnancyEvent>>
		<<else>>
			<<if !$daily.pregnancyEvent>>
				<<set $daily.pregnancyEvent to 0>>
			<</if>>
			<<set $daily.pregnancyEvent += 15>>
		<</if>>
	<</if>>
	<</silently>><<if $_text_output>><<print $_text_output>><br><</if>>
<</widget>>

/*ToDo: Pregnancy Story Content: Lacks content, small unique events for when the player's stress passes out due to their pregnancy*/
<<widget "pregnancyWatersBrokenPassout">>
	<<set $_pregnancy to getPregnancyObject()>>
	<<if $_pregnancy.fetus>>
		<<set $_pregnancy.waterBreaking to false>>
		/*ToDo: Pregnancy - fill out for specific pregnancy passout events*/
		/*Area specific passout text for alternative pregnancy birth events*/
		<<switch _args[0]>>
			<<case "asylum">>
			<<case "forest">>
				<<if $_pregnancy.type is "wolf">>
					/*wolves help you if the pc is pregnant with wolves?*/
				<<else>>

				<</if>>
			<<case "lake">>
			<<case "tentacleworld">>
				<<if $tentacleEntrance is "mirror">>
					/*Entered vie the players bedroom mirror*/
				<<else>>
					/*Entered vie the asylum*/
				<</if>>
			<<case "farmroad">>
				<<if $location is "farm" and $_pregnancy.potentialFathers.find(father => father.source === "Alex")>>
					/*Alex can help here*/
				<<else>>

				<</if>>
			<<case "remy">>
			<<case "remyAbduction">>
			<<case "moor">>
			<<case "alley">>
			<<case "arcade">>
			<<case "beach">>
			<<case "bus">>
			<<case "docksSneak">>
			<<case "docks">>
			<<case "home">>
			<<case "hospital">>
			<<case "trash">>
			<<case "sea">>
			<<case "shop">>
			<<case "monsterTower">>
			<<case "street">>
			<<case "compound">>
			<<case "temple">>
			<<case "cave">>
			<<case "prison">>
			<<case "edencabin">>
				<<if $_pregnancy.potentialFathers.find(father => father.source === "Eden")>>
					/*Eden thinks it's his child?*/
				<<else>>

				<</if>>
			<<case "drain">>
			<<case "school">>
			<<case "schoolLibrarian">>
				/*Wake up while being put in an ambulance?*/
			<<case "adultShop">>
			<<case "office">>
			<<default>>
				With your waters broken, you're too stressed to continue.
		<</switch>>
		<br><br>
		/*Link for alternative pregnancy birth events*/
		<<switch _args[0]>>
			<<case "forest">>
				<<if $_pregnancy.type is "wolf">>
					/*wolves help you if the pc is pregnant with wolves?*/
					<<link [[Next|Pregnancy Birth Hospital Wolf 3]]>><<set $stress -= 5000>><<endevent>><</link>>
				<<else>>
					<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
				<</if>>
			<<case "edencabin">>
				<<if $_pregnancy.potentialFathers.find(father => father.source === "Eden")>>
					/*Alternative place to give birth?*/
					<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
				<<else>>
					<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
				<</if>>
			<<case "remy" "remyAbduction">>
				/*Alternative place to give birth?*/
				<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
			<<case "farmroad">>
				<<if $location is "farm" and $_pregnancy.potentialFathers.find(father => father.source === "Alex")>>
					/*Alternative place to give birth?*/
					<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
				<<else>>
					<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
				<</if>>
			<<case "hospital">>
				<<link [[Next|Pregnancy Birth Hospital]]>><<set $stress -= 5000>><<endevent>><</link>>
			<<default>>
				<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</switch>>
	<<else>>
		Error Pregnancy Object not found in the passage '<<print $passage>>'.
	<</if>>
<</widget>>

<<widget "pregnancyMorningAfterPill">>
	<<set $_menstruation to $sexStats.vagina.menstruation>>
	<<set $_pregnancy to getPregnancyObject()>>
	<<set _morningAfterPillResult to "no pregnant">> /* This variable returns the result of taking the pill */
	<<if $_menstruation.currentState is "pregnant">>
		<<if $_pregnancy.type is "human">>
			<<set _currentDay to $_pregnancy.timer / (1 / ((1 / 9) * $humanPregnancyMonths))>>
		<<elseif $_pregnancy.type is "wolf">>
			<<set _currentDay to $_pregnancy.timer / (1 / ((1 / 12) * $wolfPregnancyWeeks))>>
		<<else>>
			<<set _currentDay to 1000>>
			<<set _morningAfterPillResult to "unknown type">>
		<</if>>
		<<if _currentDay lte 2>> /* the first 2 days the pill clears the pregnancy and restarts the menstrual cycle */
			<<set $_pregnancy.type to null>>
			<<set $_pregnancy.fetus to []>>
			<<set $_pregnancy.waterBreaking to false>>
			<<set $_pregnancy.waterBreakingTimer to null>>
			<<set $_pregnancy.timer to null>>
			<<set $_pregnancy.timerEnd to null>>
			<<set $_pregnancy.awareOf to null>>
			<<set $_pregnancy.awareOfDetails to null>>
			<<set $_pregnancy.potentialFathers to []>>
			<<set $sexStats[($player.vaginaExist ? "vagina" : "anus")].sperm to []>>
			<<set $_menstruation.currentDay to .5>>
			<<set $_menstruation.currentState to "normal">>
			<<menstruationCycle>>
			<<set _morningAfterPillResult to "successful">>
		<<elseif _currentDay lte 6 - ($_pregnancy.type === "wolf" ? 2 : 0)>> /* the days between 3 and 6 or 4 for humans or wolves the pill clears the pregnancy and restarts the menstrual cycle, but returns the "a little late" message */
			<<set $_pregnancy.type to null>>
			<<set $_pregnancy.fetus to []>>
			<<set $_pregnancy.waterBreaking to false>>
			<<set $_pregnancy.waterBreakingTimer to null>>
			<<set $_pregnancy.timer to null>>
			<<set $_pregnancy.timerEnd to null>>
			<<set $_pregnancy.awareOf to null>>
			<<set $_pregnancy.awareOfDetails to null>>
			<<set $_pregnancy.potentialFathers to []>>
			<<set $sexStats[($player.vaginaExist ? "vagina" : "anus")].sperm to []>>
			<<set $_menstruation.currentDay to .5>>
			<<set $_menstruation.currentState to "normal">>
			<<menstruationCycle>>
			<<set _morningAfterPillResult to "a little late">>
		<<elseif _currentDay lte 10 - ($_pregnancy.type === "wolf" ? 4 : 0)>> /* The days from 7 to 10/5 to 6 for humans/wolves the pills clears pregnancy but puts mestruation in the recovery state, returns the "late" message*/
			<<set $_pregnancy.type to null>>
			<<set $_pregnancy.fetus to []>>
			<<set $_pregnancy.waterBreaking to false>>
			<<set $_pregnancy.waterBreakingTimer to null>>
			<<set $_pregnancy.timer to null>>
			<<set $_pregnancy.timerEnd to null>>
			<<set $_pregnancy.awareOf to null>>
			<<set $_pregnancy.awareOfDetails to null>>
			<<set $_pregnancy.potentialFathers to []>>
			<<set $sexStats[($player.vaginaExist ? "vagina" : "anus")].sperm to []>>
			<<set $_menstruation.currentDay to .5>>
			<<set $_menstruation.currentState to  "recovering">>
			<<set $_menstruation.recoveryTime to ($_pregnancy.type === "human" ? random(2, 3) * $humanPregnancyMonths : random(1, 2) * $wolfPregnancyWeeks)>>
			<<set $_menstruation.recoveryTimeStart to $_menstruation.recoveryTime>>
			<<set $_menstruation.recoveryStage to 0>>
			<<set $_menstruation.periodEnabled to false>>
			<<menstruationCycle>>
			<<set _morningAfterPillResult to "late">>
		<<elseif _currentDay lte 999>>
			<<set _morningAfterPillResult to "too late">> /* It's too late, the pill does nothing to the pregnancy */
		<</if>>
	<<else>>
		<<set $sexStats[($player.vaginaExist ? "vagina" : "anus")].sperm to []>>
		<<set $_menstruation.currentDay to .5>> /* If the player isn't pregnant the pill only restarts the menstrual cycle and clears sperm*/
	<</if>>
<</widget>>

<<widget "pregnancyGendersText">><<silently>>
	<<set $_pregnancy to getPregnancyObject()>>
	<<set $_pregnancy.genderKnown to true>>
	<<set $_genders to {m:0,f:0,h:0}>>
	<<run $_pregnancy.fetus.forEach(b => $_genders[b.gender]++)>>
	<<if $_pregnancy.fetus[0].features.identical is true>>
		<<set $_text_output to "I believe they are all identical <<if $_pregnancy.fetus.length is 3>>triplets<<else>>twins<</if>> due to them all being the same gender and their facial features being similar.">>
	<<elseif ($_genders.m is $_pregnancy.fetus.length or $_genders.f is $_pregnancy.fetus.length or $_genders.h is $_pregnancy.fetus.length) and $_pregnancy.fetus.length gt 1>>
		<<set $_text_output to "Despite all being the same gender, I believe they are not identical due to having slightly different facial features.">>
	<<else>>
		<<set $_text_output to "You have">>
		<<if $_genders.m gt 0>>
			<<switch $_genders.m>>
				<<case 1>><<set $_text_output += " a">>
				<<default>><<set $_text_output += " " + $_genders.m>>
			<</switch>>
			<<set $_text_output += " baby boy">><<if $_genders.m gt 1>><<set $_text_output += "s">><</if>>
			<<if $_genders.f gt 0 and $_genders.h gt 0>>
				<<set $_text_output += ",">>
			<<elseif $_genders.f gt 0 or $_genders.h gt 0>>
				<<set $_text_output += " and">>
			<</if>>
		<</if>>
		<<if $_genders.f gt 0>>
			<<switch $_genders.f>>
				<<case 1>><<set $_text_output += " a">>
				<<default>><<set $_text_output += " " + $_genders.f>>
			<</switch>>
			<<set $_text_output += " baby girl">>
			<<if $_genders.f gt 1>><<set $_text_output += "s">><</if>>
			<<if $_genders.h gt 0>><<set $_text_output += " and">><</if>>
		<</if>>
		<<if $_genders.h gt 0>>
			<<switch $_genders.h>>
				<<case 1>><<set $_text_output += " a">>
				<<default>><<set $_text_output += " " + $_genders.h>>
			<</switch>>
			<<set $_text_output += " baby hermaphrodite">>
			<<if $_genders.h gt 1>><<set $_text_output += "s">><</if>>
		<</if>>
		<<set $_text_output += ".">>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "babyType">><<silently>>
    <<if $_pregnancy.awareOfDetails || ((!_args[0] || _args[0] is "pc") and $_pregnancy.potentialFathers.every((father, index, array) => father.type === array[0].type))>>
        <<switch $_pregnancy.type>>
            <<case "human">>
                <<if $_pregnancy.fetus.length gt 1>>
                    <<set $_text_output to "babies">>
                <<else>>
                    <<set $_text_output to "baby">>
                <</if>>
            <<case "wolf">>
                <<if $_pregnancy.fetus.length gt 1>>
                    <<set $_text_output to "puppies">>
                <<else>>
                    <<set $_text_output to "puppy">>
                <</if>>
        <</switch>>
    <<else>>
        <<set $_text_output to "baby">>
    <</if>>
<</silently>><<print $_text_output>>
<</widget>>

<<widget "pregnancyBabyText">><<silently>>
	<<if _args[0] isnot "pc" and C.npc[_args[0]] and C.npc[_args[0]].pregnancy.enabled isnot undefined>>
		<<set $_pregnancy to C.npc[_args[0]].pregnancy>>
	<<else>>
		<<set $_pregnancy to getPregnancyObject()>>
	<</if>>
	<<if $_pregnancy.awareOfDetails || ((!_args[0] || _args[0] is "pc") and $_pregnancy.potentialFathers.every((father, index, array) => father.type === array[0].type))>>
		<<set $_num to ($_pregnancy.awareOfDetails ? $_pregnancy.fetus.length : 1)>>
		<<switch $_pregnancy.type>>
			<<case "human">>
				<<if $_num gt 1>>
					<<set $_text_output to ($_num is 3 ? "triplets" : "twins")>>
				<<else>>
					<<set $_text_output to "baby">>
				<</if>>
			<<case "wolf">>
				<<if $_num lte 3>>
					<<set $_text_output to ($_num is 1 ? "pup" : "pups")>>
				<<else>>
					<<set $_text_output to "litter">>
				<</if>>
			<<default>>
				<<set $_text_output to ($_num gt 1 ? "babies" : "baby")>>
		<</switch>>
	<<else>>
		<<set $_text_output to "baby">>
	<</if>>
<</silently>><<print $_text_output>><</widget>>

<<widget "npcPregnancyUpdater">>
	<<for $_i to 0; $_i lt $NPCNameList.length; $_i++>>
		<<set $_name to $NPCNameList[$_i]>>
		<<if $NPCName[$NPCNameList.indexOf($_name)].pregnancy is undefined>>
			<<set $NPCName[$NPCNameList.indexOf($_name)].pregnancy to {}>>
		<</if>>
		<<set $_pregnancy to $NPCName[$NPCNameList.indexOf($_name)].pregnancy>>
		<<if !setup.pregnancy.infertile.includes($_name) and setup.pregnancy.typesEnabled.includes($NPCName[$NPCNameList.indexOf($_name)].type) and
		(($incompletePregnancyDisable is "f" and $NPCName[$NPCNameList.indexOf($_name)].pregnancy.enabled is undefined and !setup.pregnancy.ignoresIncompeteCheck.includes($_name)) or 
		(setup.pregnancy.canBePregnant.includes($_name) and $NPCName[$NPCNameList.indexOf($_name)].pregnancy.enabled is undefined))>>
			<<set $_pregnancy.fetus to []>>
			<<set $_pregnancy.givenBirth to 0>>
			<<set $_pregnancy.totalBirthEvents to 0>>
			<<set $_pregnancy.timer to null>>
			<<set $_pregnancy.timerEnd to null>>
			<<set $_pregnancy.waterBreaking to null>>
			<<set $_pregnancy.npcAwareOf to null>>
			<<set $_pregnancy.pcAwareOf to null>>
			<<set $_pregnancy.type to null>>
			<<set $_pregnancy.enabled to true>>
			<<set $_pregnancy.cycleDaysTotal to random(24,32)>>
			<<set $_pregnancy.cycleDay to random(1,$_pregnancy.cycleDaysTotal)>>
			<<set $_pregnancy.cycleDangerousDay to 10>>
			<<set $_pregnancy.sperm to []>>
			<<set $_pregnancy.potentialFathers to []>>
			<<set $_pregnancy.nonCycleRng to [random(0,3),random(0,3)]>>
			<<switch $_name>>
				<<case "Kylar">><<set $_pregnancy.pills to "fertility">>
				<<case "Alex" "Wren">><<set $_pregnancy.pills to "contraceptive">>
				<<default>><<set $_pregnancy.pills to null>>
			<</switch>>
		<<elseif setup.pregnancy.infertile.includes($_name) or (!setup.pregnancy.canBePregnant.includes($_name) and $incompletePregnancyDisable isnot "f")>>
			/*For saves that have the variables set, but have no need to be there*/
			<<set $NPCName[$NPCNameList.indexOf($_name)].pregnancy to {}>>
		<</if>>
			/* 0 = never uses a condom, Kylar has a special exception
			* 50 = Will use a condom, but will refrain if asked
			* 100 = Always uses a condom, will not remove it
			*/
		<<if !$NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance or $objectVersion.pregnancyAvoidance is undefined>>
			<<switch $_name>>
				<<case "Kylar" "Black Wolf" "Great Hawk" "Eden" "Ivory Wraith">><<set $NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance to 0>>
				<<case "Robin" "Whitney" "Alex" "Wren" "Avery">><<set $NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance to 50>>
				<<default>><<set $NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance to 100>>
			<</switch>>
		<</if>>
	<</for>>
	<<set $objectVersion.pregnancyAvoidance to 1>>
<</widget>>

/*ToDo: Pregnancy Story Content: Not used in events at the moment, add to appropriate story passages, when the player gives birth to their children*/
<<widget "earSlimePregnancy">>
	<<if _args[0] and $corruption_slime gte 80>>
		<<switch _args[0]>>
			<<case "human">><<set $_type to _args[1]? 'babies' : 'baby'>>
			<<case "wolf">><<set $_type to _args[1] ? 'wolf puppies' : 'wolf pup'>>
			<<default>><<set $_type to _args[1] ? 'babies' : 'baby'>>
		<</switch>>
		<<set $_babiesText to _args[1] ? `to some beautiful ${$_type}` : `to a beautiful ${$_type}`>>
		<<if $parasite.left_ear.name is "slime" and $parasite.right_ear.name is "slime">>
			<span class="green">A fulfilled warmth fills you.</span>
			You almost forget the strife of the world. You can tell it's the slimes in your ears, rewarding you for giving birth <<print $_babiesText>>.
			<<lllcorruption>><<lltrauma>><<llstress>><<trauma -24>><<stress -24>><<corruption `Math.floor($corruption_slime * -0.4)`>>
			<br><br>
		<<elseif $parasite.left_ear.name is "slime" or $parasite.right_ear.name is "slime">>
			<span class="green">A fulfilled warmth fills you.</span>
			You almost forget the strife of the world. You can tell it's the slime in your ear, rewarding you for giving birth <<print $_babiesText>>.
			<<llcorruption>><<ltrauma>><<lstress>><<trauma -12>><<stress -12>><<corruption `Math.floor($corruption_slime * -0.2)`>>
			<br><br>
		<</if>>
	<</if>>
<</widget>>

<<widget "fetishPregnancyImg">>
	<<if _playerIsNowPregnant or _npcIsNowPregnant>>
		<div class="impregnatedGrid">
			<<if _playerIsNowPregnant>>
				<div @class="$options.images is 1 ? 'impregnated' : ''">
					<div>
						<<if _playerIsNowPregnant is "pc">>
							<span class="lewd">You just got yourself pregnant.</span>
						<<else>>
							<span class="lewd"><<print pregnancyNameCorrection(_playerIsNowPregnant, true)>> just got you pregnant.</span>
						<</if>>
					</div>
					<<if $options.images is 1>>
						<<if $player.vaginaExist>>
							<<set $_fCum to Math.clamp(setup.bodyliquid.combined("vagina"),1,5)>>
						<<else>>
							<<set $_fCum to Math.clamp(setup.bodyliquid.combined("anus"),1,5)>>
						<</if>>
						<img class="fertilization" @src="'img/sex/fertilization/fert' + $_fCum + '.gif'">
					<</if>>
				</div>
			<</if>>
			<<if _npcIsNowPregnant>>
				<div @class="$options.images is 1 ? 'impregnated' : ''">
					<div><span class="lewd">You just impregnated <<print pregnancyNameCorrection(_npcIsNowPregnant)>>.</span></div>
					<<if $options.images is 1>><img class="fertilization" src="img/sex/fertilization/fert6.gif"><</if>>
				</div>
			<</if>>
		</div>
		<br>
	<</if>>
<</widget>>
